/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 3);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

eval("\nvar igeConfig = __webpack_require__(4);\n\n// Define the global storage object for classes\nvar igeClassStore = {};\n\n/**\n * The base class system.\n */\nvar IgeClass = function () {\n\tvar initializing = false,\n\t    fnTest = /xyz/.test(function () {\n\t\txyz;\n\t}) ? /\\b_super\\b/ : /.*/,\n\n\n\t// The base Class implementation (does nothing)\n\tIgeClass = function () {},\n\n\n\t/**\n  * Provides logging capabilities to all IgeClass instances.\n  * @param {String} text The text to log.\n  * @param {String} type The type of log to output, can be 'log',\n  * 'info', 'warning' or 'error'.\n  * @param {Object=} obj An optional object that will be output\n  * before the log text is output.\n  * @example #Log a message\n  *     var entity = new IgeEntity();\n  *     \n  *     // Will output:\n  *     //     IGE *log* [IgeEntity] : hello\n  *     entity.log('Hello');\n  * @example #Log an info message with an optional parameter\n  *     var entity = new IgeEntity(),\n  *         param = 'moo';\n  *\t\n  *     // Will output:\n  *     //    moo\n  *     //    IGE *log* [IgeEntity] : hello\n  *     entity.log('Hello', 'info', param);\n  * @example #Log a warning message (which will cause a stack trace to be shown)\n  *     var entity = new IgeEntity();\n  *\t\n  *     // Will output (stack trace is just an example here, real one will be more useful):\n  *     //    Stack: {anonymous}()@<anonymous>:2:8\n  *     //    ---- Object.InjectedScript._evaluateOn (<anonymous>:444:39)\n  *     //    ---- Object.InjectedScript._evaluateAndWrap (<anonymous>:403:52)\n  *     //    ---- Object.InjectedScript.evaluate (<anonymous>:339:21)\n  *     //    IGE *warning* [IgeEntity] : A test warning\n  *     entity.log('A test warning', 'warning');\n  * @example #Log an error message (which will cause an exception to be raised and a stack trace to be shown)\n  *     var entity = new IgeEntity();\n  *\t\n  *     // Will output (stack trace is just an example here, real one will be more useful):\n  *     //    Stack: {anonymous}()@<anonymous>:2:8\n  *     //    ---- Object.InjectedScript._evaluateOn (<anonymous>:444:39)\n  *     //    ---- Object.InjectedScript._evaluateAndWrap (<anonymous>:403:52)\n  *     //    ---- Object.InjectedScript.evaluate (<anonymous>:339:21)\n  *     //    IGE *error* [IgeEntity] : An error message\n  *     entity.log('An error message', 'error');\n  */\n\tlog = function (text, type, obj) {\n\t\tif (igeConfig.debug._enabled) {\n\t\t\tvar indent = '',\n\t\t\t    stack,\n\t\t\t    thisId;\n\n\t\t\tif (typeof this._id !== 'undefined') {\n\t\t\t\tthisId = ':' + this._id;\n\t\t\t} else {\n\t\t\t\tthisId = '';\n\t\t\t}\n\n\t\t\ttype = type || 'log';\n\n\t\t\tif (obj !== undefined) {\n\t\t\t\tconsole.warn(obj);\n\t\t\t}\n\n\t\t\tif (type === 'warning' || type === 'error') {\n\t\t\t\tif (igeConfig.debug._stacks) {\n\t\t\t\t\tif (igeConfig.debug._node) {\n\t\t\t\t\t\tif (console.trace) {\n\t\t\t\t\t\t\tconsole.trace();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstack = new Error().stack;\n\t\t\t\t\t\t\t//console.log(color.magenta('Stack:'), color.red(stack));\n\t\t\t\t\t\t\tconsole.log('Stack:', stack);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (typeof printStackTrace === 'function') {\n\t\t\t\t\t\t\tconsole.log('Stack:', printStackTrace().join('\\n ---- '));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (type === 'error') {\n\t\t\t\tif (typeof ige !== 'undefined') {\n\t\t\t\t\tconsole.log(indent + 'IGE *' + type + '* [' + (this._classId || this.prototype._classId) + thisId + '] : ' + 'Error encountered, stopping engine to prevent console spamming...');\n\t\t\t\t\tige.stop();\n\t\t\t\t}\n\n\t\t\t\tif (igeConfig.debug._throwErrors) {\n\t\t\t\t\tthrow indent + 'IGE *' + type + '* [' + (this._classId || this.prototype._classId) + thisId + '] : ' + text;\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log(indent + 'IGE *' + type + '* [' + (this._classId || this.prototype._classId) + thisId + '] : ' + text);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.log(indent + 'IGE *' + type + '* [' + (this._classId || this.prototype._classId) + thisId + '] : ' + text);\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\n\t/**\n  * Returns the class id. Primarily used to help identify\n  * what class an instance was instantiated with and is also\n  * output during the ige.scenegraph() method's console logging\n  * to show what class an object belongs to.\n  * @example #Get the class id of an object\n  *     var entity = new IgeEntity();\n  *\t\n  *     // Will output \"IgeEntity\"\n  *     console.log(entity.classId());\n  */\n\tclassId = function () {\n\t\treturn this._classId;\n\t},\n\n\n\t/**\n  * Creates a new instance of the component argument passing\n  * the options argument to the component as it is initialised.\n  * The new component instance is then added to \"this\" via\n  * a property name that is defined in the component class as\n  * \"componentId\".\n  * @param {IgeClass} component The class definition of the component.\n  * @param {Object=} options An options parameter to pass to the component\n  * on init.\n  * @example #Add the velocity component to an entity\n  *     var entity = new IgeEntity();\n  *     entity.addComponent(IgeVelocityComponent);\n  *     \n  *     // Now that the component is added, we can access\n  *     // the component via it's namespace. Call the \n  *     // \"byAngleAndPower\" method of the velocity component:\n  *     entity.velocity.byAngleAndPower(Math.radians(20), 0.1);\n  */\n\taddComponent = function (component, options) {\n\t\tvar newComponent = new component(this, options);\n\t\tthis[newComponent.componentId] = newComponent;\n\n\t\t// Add the component reference to the class component array\n\t\tthis._components = this._components || [];\n\t\tthis._components.push(newComponent);\n\n\t\treturn this;\n\t},\n\n\n\t/**\n  * Removes a component by it's id.\n  * @param {String} componentId The id of the component to remove.\n  * @example #Remove a component by it's id (namespace)\n  *     var entity = new IgeEntity();\n  *     \n  *     // Let's add the velocity component\n  *     entity.addComponent(IgeVelocityComponent);\n  *\t\n  *     // Now that the component is added, let's remove\n  *     // it via it's id (\"velocity\")\n  *     entity.removeComponent('velocity');\n  */\n\tremoveComponent = function (componentId) {\n\t\t// If the component has a destroy method, call it\n\t\tif (this[componentId] && this[componentId].destroy) {\n\t\t\tthis[componentId].destroy();\n\t\t}\n\n\t\t// Remove the component from the class component array\n\t\tif (this._components) {\n\t\t\tthis._components.pull(this[componentId]);\n\t\t}\n\n\t\t// Remove the component namespace from the class object\n\t\tdelete this[componentId];\n\t\treturn this;\n\t},\n\n\n\t/**\n  * Copies all properties and methods from the classObj object\n  * to \"this\". If the overwrite flag is not set or set to false,\n  * only properties and methods that don't already exists in\n  * \"this\" will be copied. If overwrite is true, they will be\n  * copied regardless.\n  * @param {Function} classObj\n  * @param {Boolean} overwrite\n  * @example #Implement all the methods of an object into another object\n  *     // Create a couple of test entities with ids\n  *     var entity1 = new IgeEntity().id('entity1'),\n  *         entity2 = new IgeEntity().id('entity2');\n  *\t\n  *     // Let's define an object with a couple of methods\n  *     var obj = {\n  *         newMethod1: function () {\n  *             console.log('method1 called on object: ' + this.id());\n  *         },\n  *         \n  *         newMethod2: function () {\n  *             console.log('method2 called on object: ' + this.id());\n  *         }\n  *     };\n  *\t\n  *     // Now let's implement the methods on our entities\n  *     entity1.implement(obj);\n  *     entity2.implement(obj);\n  *     \n  *     // The entities now have the newMethod1 and newMethod2\n  *     // methods as part of their instance so we can call them:\n  *     entity1.newMethod1();\n  *     \n  *     // The output to the console is:\n  *     //    method1 called on object: entity1\n  *     \n  *     // Now let's call newMethod2 on entity2:\n  *     entity2.newMethod2();\n  *\t\n  *     // The output to the console is:\n  *     //    method2 called on object: entity2\n  *     \n  *     // As you can see, this is a great way to add extra modular\n  *     // functionality to objects / entities at runtime.\n  */\n\timplement = function (classObj, overwrite) {\n\t\tvar i,\n\t\t    obj = classObj.prototype || classObj;\n\n\t\t// Copy the class object's properties to (this)\n\t\tfor (i in obj) {\n\t\t\t// Only copy the property if this doesn't already have it\n\t\t\tif (obj.hasOwnProperty(i) && (overwrite || this[i] === undefined)) {\n\t\t\t\tthis[i] = obj[i];\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t},\n\n\n\t/**\n  * Gets / sets a key / value pair in the object's data object. Useful for\n  * storing arbitrary game data in the object.\n  * @param {String} key The key under which the data resides.\n  * @param {*=} value The data to set under the specified key.\n  * @example #Set some arbitrary data key value pair\n  *     var entity = new IgeEntity();\n  *     entity.data('playerScore', 100);\n  *     entity.data('playerName', 'iRock');\n  * @example #Get the value of a data key\n  *     console.log(entity.data('playerScore'));\n  *     console.log(entity.data('playerName'));\n  * @return {*}\n  */\n\tdata = function (key, value) {\n\t\tif (key !== undefined) {\n\t\t\tif (value !== undefined) {\n\t\t\t\tthis._data = this._data || {};\n\t\t\t\tthis._data[key] = value;\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tif (this._data) {\n\t\t\t\treturn this._data[key];\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n  * Create a new IgeClass that inherits from this class\n  * @name extend\n  * @example #Creating a new class by extending an existing one\n  *     var NewClass = IgeClass.extend({\n  *         // Init is your constructor\n  *         init: function () {\n  *             console.log('I\\'m alive!');\n  *         }\n  *     });\n  * \n  * Further reading: [Extending Classes](http://www.isogenicengine.com/documentation/isogenic-game-engine/versions/1-1-0/manual/engine-fundamentals/classes/extending-classes/)\n  * @return {Function}\n  */\n\tIgeClass.extend = function () {\n\t\tvar name,\n\t\t    prototype,\n\n\t\t// Set prop to the last argument passed\n\t\tprop = arguments[arguments.length - 1],\n\t\t    extensionArray = arguments[0],\n\t\t    extensionItem,\n\t\t    extensionOverwrite,\n\t\t    extensionIndex,\n\t\t    propertyIndex,\n\t\t    propertyObject;\n\n\t\t// Check that the class has been assigned a classId and bug out if not\n\t\tif (!prop.classId) {\n\t\t\tconsole.log(prop);\n\t\t\tthrow 'Cannot create a new class without giving the class a classId property!';\n\t\t}\n\n\t\t// Check that the classId is not already in use\n\t\tif (igeClassStore[prop.classId]) {\n\t\t\t// This classId has already been used, bug out\n\t\t\tthrow 'Cannot create class with classId \"' + prop.classId + '\" because a class with that ID has already been created!';\n\t\t}\n\n\t\t// Instantiate a base class (but only create the instance,\n\t\t// don't run the init constructor)\n\t\tinitializing = true;\n\t\tprototype = new this();\n\t\tinitializing = false;\n\n\t\t// Copy the properties over onto the new prototype\n\t\tfor (name in prop) {\n\t\t\tif (prop.hasOwnProperty(name)) {\n\t\t\t\t// Copy the property\n\t\t\t\tprototype[name] = prop[name];\n\t\t\t}\n\t\t}\n\n\t\t// Now implement any other extensions\n\t\tif (arguments.length > 1) {\n\t\t\tif (extensionArray && extensionArray.length) {\n\t\t\t\tfor (extensionIndex = 0; extensionIndex < extensionArray.length; extensionIndex++) {\n\t\t\t\t\textensionItem = extensionArray[extensionIndex];\n\t\t\t\t\tpropertyObject = extensionItem.extension.prototype || extensionItem.extension;\n\t\t\t\t\textensionOverwrite = extensionItem.overwrite;\n\n\t\t\t\t\t// Copy the class object's properties to (this)\n\t\t\t\t\tfor (propertyIndex in propertyObject) {\n\t\t\t\t\t\t// Only copy the property if this doesn't already have it or\n\t\t\t\t\t\t// the extension is set to overwrite any existing properties\n\t\t\t\t\t\tif (propertyObject.hasOwnProperty(propertyIndex) && (extensionOverwrite || prototype[propertyIndex] === undefined)) {\n\t\t\t\t\t\t\tprototype[propertyIndex] = propertyObject[propertyIndex];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t//prototype._superClass = this.prototype;\n\t\t//console.log(prop.classId, 'extends', this.prototype._classId);\n\n\t\t// The dummy class constructor\n\t\tfunction IgeClass() {\n\t\t\tif (!initializing && this.init) {\n\t\t\t\t// Call the class init method\n\t\t\t\tthis.init.apply(this, arguments);\n\t\t\t}\n\t\t}\n\n\t\t// Populate our constructed prototype object\n\t\tIgeClass.prototype = prototype;\n\n\t\t// Enforce the constructor to be what we expect\n\t\tIgeClass.prototype.constructor = IgeClass;\n\n\t\t// And make this class extensible\n\t\tIgeClass.extend = arguments.callee;\n\n\t\t// Add log capability\n\t\tIgeClass.prototype.log = log;\n\n\t\t// Add data capability\n\t\tIgeClass.prototype.data = data;\n\n\t\t// Add class name capability\n\t\tIgeClass.prototype.classId = classId; // This is a method that returns _classId\n\t\tIgeClass.prototype._classId = prop.classId || 'IgeClass';\n\n\t\t// Add the addComponent method\n\t\tIgeClass.prototype.addComponent = addComponent;\n\n\t\t// Add the removeComponent method\n\t\tIgeClass.prototype.removeComponent = removeComponent;\n\n\t\t// Add the implement method\n\t\tIgeClass.prototype.implement = implement;\n\n\t\t// Add editor settings\n\t\tIgeClass.prototype.__igeEditor = prop.editorOptions;\n\n\t\t// Register the class with the class store\n\t\tigeClassStore[prop.classId] = IgeClass;\n\n\t\treturn IgeClass;\n\t};\n\n\t/**\n  * Test method\n  * @param prop\n  * @return {Function}\n  */\n\tIgeClass.vanilla = function (prop) {\n\t\tvar IgeClass = prop.init || function () {},\n\t\t    prototype = new this();\n\n\t\t// Copy the properties over onto the new prototype\n\t\tfor (name in prop) {\n\t\t\tif (prop.hasOwnProperty(name) && name !== 'init') {\n\t\t\t\t// Copy the property\n\t\t\t\tprototype[name] = prop[name];\n\t\t\t}\n\t\t}\n\n\t\t// Populate our constructed prototype object\n\t\tIgeClass.prototype = prototype;\n\n\t\t// Enforce the constructor to be what we expect\n\t\tIgeClass.prototype.constructor = IgeClass;\n\n\t\t// And make this class extensible\n\t\tIgeClass.extend = this.extend;\n\n\t\t// Add log capability\n\t\tIgeClass.prototype.log = log;\n\n\t\t// Add data capability\n\t\tIgeClass.prototype.data = data;\n\n\t\t// Add class name capability\n\t\tIgeClass.prototype.classId = classId; // This is a method that returns _classId\n\t\tIgeClass.prototype._classId = prop.classId || 'IgeClass';\n\n\t\t// Add the addComponent method\n\t\tIgeClass.prototype.addComponent = addComponent;\n\n\t\t// Add the removeComponent method\n\t\tIgeClass.prototype.removeComponent = removeComponent;\n\n\t\t// Add the implement method\n\t\tIgeClass.prototype.implement = implement;\n\n\t\t// Register the class with the class store\n\t\tigeClassStore[prop.classId] = IgeClass;\n\n\t\treturn IgeClass;\n\t};\n\n\tIgeClass.prototype._classId = 'IgeClass';\n\n\treturn IgeClass;\n}();\n\nif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n\tmodule.exports = IgeClass;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

eval("\nvar isClient = !!(\"boolean\" !== 'undefined' && true);\n\n/**\n * Emulation ige object\n */\nvar ige = {\n\t_timeScale: 1,\n\t_currentTime: 0,\n\n\tisServer: !isClient && typeof module !== 'undefined' && typeof module.exports !== 'undefined',\n\tisClient: isClient,\n\n\t/**\n * Gets / sets the current time scalar value. The engine's internal\n * time is multiplied by this value and it's default is 1. You can set it to\n * 0.5 to slow down time by half or 1.5 to speed up time by half. Negative\n * values will reverse time but not all engine systems handle this well\n * at the moment.\n * @param {Number=} val The time scale value.\n * @returns {*}\n */\n\ttimeScale: function (val) {\n\t\tif (val !== undefined) {\n\t\t\tthis._timeScale = val;\n\t\t\treturn this;\n\t\t}\n\n\t\treturn this._timeScale;\n\t}\n\n};\n\nif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n\tmodule.exports = ige;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvY29tcG9uZW50cy9jb21tb24vaWdlLmpzPzIxY2IiXSwibmFtZXMiOlsiaXNDbGllbnQiLCJpZ2UiLCJfdGltZVNjYWxlIiwiX2N1cnJlbnRUaW1lIiwiaXNTZXJ2ZXIiLCJtb2R1bGUiLCJleHBvcnRzIiwidGltZVNjYWxlIiwidmFsIiwidW5kZWZpbmVkIl0sIm1hcHBpbmdzIjoiO0FBQ0EsSUFBSUEsV0FBVyxDQUFDLEVBQUUsY0FBc0IsV0FBdEIsSUFBcUMsSUFBdkMsQ0FBaEI7O0FBRUE7OztBQUdBLElBQUlDLE1BQU07QUFDTkMsYUFBWSxDQUROO0FBRU5DLGVBQWMsQ0FGUjs7QUFJVEMsV0FBVSxDQUFDSixRQUFELElBQWMsT0FBT0ssTUFBUCxLQUFtQixXQUFuQixJQUFrQyxPQUFPQSxPQUFPQyxPQUFkLEtBQTJCLFdBSjVFO0FBS1ROLFdBQVVBLFFBTEQ7O0FBT047Ozs7Ozs7OztBQVNITyxZQUFXLFVBQVVDLEdBQVYsRUFBZTtBQUN6QixNQUFJQSxRQUFRQyxTQUFaLEVBQXVCO0FBQ3RCLFFBQUtQLFVBQUwsR0FBa0JNLEdBQWxCO0FBQ0EsVUFBTyxJQUFQO0FBQ0E7O0FBRUQsU0FBTyxLQUFLTixVQUFaO0FBQ0c7O0FBdkJLLENBQVY7O0FBMkJBLElBQUksT0FBUUcsTUFBUixLQUFvQixXQUFwQixJQUFtQyxPQUFRQSxPQUFPQyxPQUFmLEtBQTRCLFdBQW5FLEVBQWdGO0FBQUVELFFBQU9DLE9BQVAsR0FBaUJMLEdBQWpCO0FBQXVCIiwiZmlsZSI6IjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbnZhciBpc0NsaWVudCA9ICEhKHR5cGVvZihJU19DTElFTlQpICE9PSAndW5kZWZpbmVkJyAmJiBJU19DTElFTlQpO1xuXG4vKipcbiAqIEVtdWxhdGlvbiBpZ2Ugb2JqZWN0XG4gKi9cbnZhciBpZ2UgPSB7XG4gICAgX3RpbWVTY2FsZTogMSxcbiAgICBfY3VycmVudFRpbWU6IDAsXG5cblx0aXNTZXJ2ZXI6ICFpc0NsaWVudCAmJiAodHlwZW9mKG1vZHVsZSkgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZihtb2R1bGUuZXhwb3J0cykgIT09ICd1bmRlZmluZWQnKSxcblx0aXNDbGllbnQ6IGlzQ2xpZW50LFxuXG4gICAgLyoqXG5cdCAqIEdldHMgLyBzZXRzIHRoZSBjdXJyZW50IHRpbWUgc2NhbGFyIHZhbHVlLiBUaGUgZW5naW5lJ3MgaW50ZXJuYWxcblx0ICogdGltZSBpcyBtdWx0aXBsaWVkIGJ5IHRoaXMgdmFsdWUgYW5kIGl0J3MgZGVmYXVsdCBpcyAxLiBZb3UgY2FuIHNldCBpdCB0b1xuXHQgKiAwLjUgdG8gc2xvdyBkb3duIHRpbWUgYnkgaGFsZiBvciAxLjUgdG8gc3BlZWQgdXAgdGltZSBieSBoYWxmLiBOZWdhdGl2ZVxuXHQgKiB2YWx1ZXMgd2lsbCByZXZlcnNlIHRpbWUgYnV0IG5vdCBhbGwgZW5naW5lIHN5c3RlbXMgaGFuZGxlIHRoaXMgd2VsbFxuXHQgKiBhdCB0aGUgbW9tZW50LlxuXHQgKiBAcGFyYW0ge051bWJlcj19IHZhbCBUaGUgdGltZSBzY2FsZSB2YWx1ZS5cblx0ICogQHJldHVybnMgeyp9XG5cdCAqL1xuXHR0aW1lU2NhbGU6IGZ1bmN0aW9uICh2YWwpIHtcblx0XHRpZiAodmFsICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdHRoaXMuX3RpbWVTY2FsZSA9IHZhbDtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLl90aW1lU2NhbGU7XG4gICAgfSxcbiAgICBcbn07XG5cbmlmICh0eXBlb2YgKG1vZHVsZSkgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiAobW9kdWxlLmV4cG9ydHMpICE9PSAndW5kZWZpbmVkJykgeyBtb2R1bGUuZXhwb3J0cyA9IGlnZTsgfVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2FwcC9jb21wb25lbnRzL2NvbW1vbi9pZ2UuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

eval("\nvar IgeClass = __webpack_require__(0);\n\n/**\n * Creates a new class with the capability to emit events.\n */\nvar IgeEventingClass = IgeClass.extend({\n\tclassId: 'IgeEventingClass',\n\n\t/**\n  * Add an event listener method for an event.\n  * @param {String || Array} eventName The name of the event to listen for (string), or an array of events to listen for.\n  * @param {Function} call The method to call when the event listener is triggered.\n  * @param {Object=} context The context in which the call to the listening method will be made (sets the 'this' variable in the method to the object passed as this parameter).\n  * @param {Boolean=} oneShot If set, will instruct the listener to only listen to the event being fired once and will not fire again.\n  * @param {Boolean=} sendEventName If set, will instruct the emitter to send the event name as the argument instead of any emitted arguments.\n  * @return {Object} The event listener object. Hold this value if you later want to turn off the event listener.\n  * @example #Add an Event Listener\n  *     // Register event lister and store in \"evt\"\n  *     var evt = myEntity.on('mouseDown', function () { console.log('down'); });\n  * @example #Listen for Event Data\n  *     // Set a listener to listen for the data (multiple values emitted\n  *     // from an event are passed as function arguments)\n  *     myEntity.on('hello', function (arg1, arg2) {\n  *         console.log(arg1, arg2);\n  *     }\n  *     \n  *     // Emit the event named \"hello\"\n  *     myEntity.emit('hello', ['data1', 'data2']);\n  *     \n  *     // The console output is:\n  *     //    data1, data2\n  */\n\ton: function (eventName, call, context, oneShot, sendEventName) {\n\t\tvar self = this,\n\t\t    newListener,\n\t\t    addListener,\n\t\t    existingIndex,\n\t\t    elArr,\n\t\t    multiEvent,\n\t\t    eventIndex,\n\t\t    eventData,\n\t\t    eventObj,\n\t\t    multiEventName,\n\t\t    i;\n\n\t\t// Check that we have an event listener object\n\t\tthis._eventListeners = this._eventListeners || {};\n\n\t\tif (typeof call === 'function') {\n\t\t\tif (typeof eventName === 'string') {\n\t\t\t\t// Compose the new listener\n\t\t\t\tnewListener = {\n\t\t\t\t\tcall: call,\n\t\t\t\t\tcontext: context,\n\t\t\t\t\toneShot: oneShot,\n\t\t\t\t\tsendEventName: sendEventName\n\t\t\t\t};\n\n\t\t\t\telArr = this._eventListeners[eventName] = this._eventListeners[eventName] || [];\n\n\t\t\t\t// Check if we already have this listener in the list\n\t\t\t\taddListener = true;\n\n\t\t\t\t// TO-DO - Could this do with using indexOf? Would that work? Would be faster?\n\t\t\t\texistingIndex = elArr.indexOf(newListener);\n\t\t\t\tif (existingIndex > -1) {\n\t\t\t\t\taddListener = false;\n\t\t\t\t}\n\n\t\t\t\t// Add this new listener\n\t\t\t\tif (addListener) {\n\t\t\t\t\telArr.push(newListener);\n\t\t\t\t}\n\n\t\t\t\treturn newListener;\n\t\t\t} else {\n\t\t\t\t// The eventName is an array of names, creating a group of events\n\t\t\t\t// that must be fired to fire this event callback\n\t\t\t\tif (eventName.length) {\n\t\t\t\t\t// Loop the event array\n\t\t\t\t\tmultiEvent = [];\n\t\t\t\t\tmultiEvent[0] = 0; // This will hold our event count total\n\t\t\t\t\tmultiEvent[1] = 0; // This will hold our number of events fired\n\n\t\t\t\t\t// Define the multi event callback\n\t\t\t\t\tmultiEvent[3] = function (firedEventName) {\n\t\t\t\t\t\tmultiEvent[1]++;\n\n\t\t\t\t\t\tif (multiEvent[0] === multiEvent[1]) {\n\t\t\t\t\t\t\t// All the multi-event events have fired\n\t\t\t\t\t\t\t// so fire the callback\n\t\t\t\t\t\t\tcall.apply(context || self);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\tfor (eventIndex in eventName) {\n\t\t\t\t\t\tif (eventName.hasOwnProperty(eventIndex)) {\n\t\t\t\t\t\t\teventData = eventName[eventIndex];\n\t\t\t\t\t\t\teventObj = eventData[0];\n\t\t\t\t\t\t\tmultiEventName = eventData[1];\n\n\t\t\t\t\t\t\t// Increment the event listening count total\n\t\t\t\t\t\t\tmultiEvent[0]++;\n\n\t\t\t\t\t\t\t// Register each event against the event object with a callback\n\t\t\t\t\t\t\teventObj.on(multiEventName, multiEvent[3], null, true, true);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif (typeof eventName !== 'string') {\n\t\t\t\teventName = '*Multi-Event*';\n\t\t\t}\n\t\t\tthis.log('Cannot register event listener for event \"' + eventName + '\" because the passed callback is not a function!', 'error');\n\t\t}\n\t},\n\n\t/**\n  * Remove an event listener. If the _processing flag is true\n  * then the removal will be placed in the removals array to be\n  * processed after the event loop has completed in the emit()\n  * method.\n  * @param {Boolean} eventName The name of the event you originally registered to listen for.\n  * @param {Object} evtListener The event listener object to cancel. This object is the one\n  * returned when calling the on() method. It is NOT the method you passed as the second argument\n  * to the on() method.\n  * @param {Function} callback The callback method to call when the event listener has been\n  * successfully removed. If you attempt to remove a listener during the event firing loop\n  * then the listener will not immediately be removed but will be queued for removal before\n  * the next listener loop is fired. In this case you may like to be informed via callback\n  * when the listener has been fully removed in which case, provide a method for this argument.\n  * \n  * The callback will be passed a single boolean argument denoting if the removal was successful\n  * (true) or the listener did not exist to remove (false).\n  * @example #Switch off an Event Listener\n  *     // Register event lister and store in \"evt\"\n  *     var evt = myEntity.on('mouseDown', function () { console.log('down'); });\n  *     \n  *     // Switch off event listener\n  *     myEntity.off('mouseDown', evt);\n  * @return {Boolean}\n  */\n\toff: function (eventName, evtListener, callback) {\n\t\tif (this._eventListeners) {\n\t\t\tif (!this._eventListeners._processing) {\n\t\t\t\tif (this._eventListeners[eventName]) {\n\t\t\t\t\t// Find this listener in the list\n\t\t\t\t\tvar evtListIndex = this._eventListeners[eventName].indexOf(evtListener);\n\t\t\t\t\tif (evtListIndex > -1) {\n\t\t\t\t\t\t// Remove the listener from the event listener list\n\t\t\t\t\t\tthis._eventListeners[eventName].splice(evtListIndex, 1);\n\t\t\t\t\t\tif (callback) {\n\t\t\t\t\t\t\tcallback(true);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.log('Failed to cancel event listener for event named \"' + eventName + '\" !', 'warning', evtListener);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis.log('Failed to cancel event listener!');\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Add the removal to a remove queue since we are processing\n\t\t\t\t// listeners at the moment and removing one would mess up the\n\t\t\t\t// loop!\n\t\t\t\tthis._eventListeners._removeQueue = this._eventListeners._removeQueue || [];\n\t\t\t\tthis._eventListeners._removeQueue.push([eventName, evtListener, callback]);\n\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\n\t\tif (callback) {\n\t\t\tcallback(false);\n\t\t}\n\t\treturn false;\n\t},\n\n\t/**\n  * Emit an event by name.\n  * @param {Object} eventName The name of the event to emit.\n  * @param {Object || Array} args The arguments to send to any listening methods.\n  * If you are sending multiple arguments, use an array containing each argument.\n  * @return {Number}\n  * @example #Emit an Event\n  *     // Emit the event named \"hello\"\n  *     myEntity.emit('hello');\n  * @example #Emit an Event With Data Object\n  *     // Emit the event named \"hello\"\n  *     myEntity.emit('hello', {moo: true});\n  * @example #Emit an Event With Multiple Data Values\n  *     // Emit the event named \"hello\"\n  *     myEntity.emit('hello', [{moo: true}, 'someString']);\n  * @example #Listen for Event Data\n  *     // Set a listener to listen for the data (multiple values emitted\n  *     // from an event are passed as function arguments)\n  *     myEntity.on('hello', function (arg1, arg2) {\n  *         console.log(arg1, arg2);\n  *     }\n  *     \n  *     // Emit the event named \"hello\"\n  *     myEntity.emit('hello', ['data1', 'data2']);\n  *     \n  *     // The console output is:\n  *     //    data1, data2\n  */\n\temit: function (eventName, args) {\n\t\tif (this._eventListeners) {\n\t\t\t// Check if the event has any listeners\n\t\t\tif (this._eventListeners[eventName]) {\n\n\t\t\t\t// Fire the listeners for this event\n\t\t\t\tvar eventCount = this._eventListeners[eventName].length,\n\t\t\t\t    eventCount2 = this._eventListeners[eventName].length - 1,\n\t\t\t\t    finalArgs,\n\t\t\t\t    i,\n\t\t\t\t    cancelFlag,\n\t\t\t\t    eventIndex,\n\t\t\t\t    tempEvt,\n\t\t\t\t    retVal;\n\n\t\t\t\t// If there are some events, ensure that the args is ready to be used\n\t\t\t\tif (eventCount) {\n\t\t\t\t\tfinalArgs = [];\n\t\t\t\t\tif (typeof args === 'object' && args !== null && args[0] !== null && args[0] !== undefined) {\n\t\t\t\t\t\tfor (i in args) {\n\t\t\t\t\t\t\tif (args.hasOwnProperty(i)) {\n\t\t\t\t\t\t\t\tfinalArgs[i] = args[i];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfinalArgs = [args];\n\t\t\t\t\t}\n\n\t\t\t\t\t// Loop and emit!\n\t\t\t\t\tcancelFlag = false;\n\n\t\t\t\t\tthis._eventListeners._processing = true;\n\t\t\t\t\twhile (eventCount--) {\n\t\t\t\t\t\teventIndex = eventCount2 - eventCount;\n\t\t\t\t\t\ttempEvt = this._eventListeners[eventName][eventIndex];\n\n\t\t\t\t\t\t// If the sendEventName flag is set, overwrite the arguments with the event name\n\t\t\t\t\t\tif (tempEvt.sendEventName) {\n\t\t\t\t\t\t\tfinalArgs = [eventName];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Call the callback\n\t\t\t\t\t\tretVal = tempEvt.call.apply(tempEvt.context || this, finalArgs);\n\n\t\t\t\t\t\t// If the retVal === true then store the cancel flag and return to the emitting method\n\t\t\t\t\t\tif (retVal === true) {\n\t\t\t\t\t\t\t// The receiver method asked us to send a cancel request back to the emitter\n\t\t\t\t\t\t\tcancelFlag = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Check if we should now cancel the event\n\t\t\t\t\t\tif (tempEvt.oneShot) {\n\t\t\t\t\t\t\t// The event has a oneShot flag so since we have fired the event,\n\t\t\t\t\t\t\t// lets cancel the listener now\n\t\t\t\t\t\t\tif (this.off(eventName, tempEvt) === true) {\n\t\t\t\t\t\t\t\teventCount2--;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Check that the array still exists because an event\n\t\t\t\t\t// could have triggered a method that destroyed our object\n\t\t\t\t\t// which would have deleted the array!\n\t\t\t\t\tif (this._eventListeners) {\n\t\t\t\t\t\tthis._eventListeners._processing = false;\n\n\t\t\t\t\t\t// Now process any event removal\n\t\t\t\t\t\tthis._processRemovals();\n\t\t\t\t\t}\n\n\t\t\t\t\tif (cancelFlag) {\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n  * Returns an object containing the current event listeners.\n  * @return {Object}\n  */\n\teventList: function () {\n\t\treturn this._eventListeners;\n\t},\n\n\t/**\n  * Loops the removals array and processes off() calls for\n  * each array item.\n  * @private\n  */\n\t_processRemovals: function () {\n\t\tif (this._eventListeners) {\n\t\t\tvar remArr = this._eventListeners._removeQueue,\n\t\t\t    arrCount,\n\t\t\t    item,\n\t\t\t    result;\n\n\t\t\t// If the removal array exists\n\t\t\tif (remArr) {\n\t\t\t\t// Get the number of items in the removal array\n\t\t\t\tarrCount = remArr.length;\n\n\t\t\t\t// Loop the array\n\t\t\t\twhile (arrCount--) {\n\t\t\t\t\titem = remArr[arrCount];\n\n\t\t\t\t\t// Call the off() method for this item\n\t\t\t\t\tresult = this.off(item[0], item[1]);\n\n\t\t\t\t\t// Check if there is a callback\n\t\t\t\t\tif (typeof remArr[2] === 'function') {\n\t\t\t\t\t\t// Call the callback with the removal result\n\t\t\t\t\t\tremArr[2](result);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Remove the removal array\n\t\t\tdelete this._eventListeners._removeQueue;\n\t\t}\n\t}\n});\n\nif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n\tmodule.exports = IgeEventingClass;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvY29tcG9uZW50cy9jb21tb24vSWdlRXZlbnRpbmdDbGFzcy5qcz9jOTQ3Il0sIm5hbWVzIjpbIklnZUNsYXNzIiwicmVxdWlyZSIsIklnZUV2ZW50aW5nQ2xhc3MiLCJleHRlbmQiLCJjbGFzc0lkIiwib24iLCJldmVudE5hbWUiLCJjYWxsIiwiY29udGV4dCIsIm9uZVNob3QiLCJzZW5kRXZlbnROYW1lIiwic2VsZiIsIm5ld0xpc3RlbmVyIiwiYWRkTGlzdGVuZXIiLCJleGlzdGluZ0luZGV4IiwiZWxBcnIiLCJtdWx0aUV2ZW50IiwiZXZlbnRJbmRleCIsImV2ZW50RGF0YSIsImV2ZW50T2JqIiwibXVsdGlFdmVudE5hbWUiLCJpIiwiX2V2ZW50TGlzdGVuZXJzIiwiaW5kZXhPZiIsInB1c2giLCJsZW5ndGgiLCJmaXJlZEV2ZW50TmFtZSIsImFwcGx5IiwiaGFzT3duUHJvcGVydHkiLCJsb2ciLCJvZmYiLCJldnRMaXN0ZW5lciIsImNhbGxiYWNrIiwiX3Byb2Nlc3NpbmciLCJldnRMaXN0SW5kZXgiLCJzcGxpY2UiLCJfcmVtb3ZlUXVldWUiLCJlbWl0IiwiYXJncyIsImV2ZW50Q291bnQiLCJldmVudENvdW50MiIsImZpbmFsQXJncyIsImNhbmNlbEZsYWciLCJ0ZW1wRXZ0IiwicmV0VmFsIiwidW5kZWZpbmVkIiwiX3Byb2Nlc3NSZW1vdmFscyIsImV2ZW50TGlzdCIsInJlbUFyciIsImFyckNvdW50IiwiaXRlbSIsInJlc3VsdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7QUFDQSxJQUFJQSxXQUFXLG1CQUFBQyxDQUFRLENBQVIsQ0FBZjs7QUFFQTs7O0FBR0EsSUFBSUMsbUJBQW1CRixTQUFTRyxNQUFULENBQWdCO0FBQ3RDQyxVQUFTLGtCQUQ2Qjs7QUFHdEM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXdCQUMsS0FBSSxVQUFVQyxTQUFWLEVBQXFCQyxJQUFyQixFQUEyQkMsT0FBM0IsRUFB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LElBQWtDLE9BQU9BLE9BQU9DLE9BQWQsS0FBMkIsV0FBakUsRUFBOEU7QUFBRUQsUUFBT0MsT0FBUCxHQUFpQm5ELGdCQUFqQjtBQUFvQyIsImZpbGUiOiIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG52YXIgSWdlQ2xhc3MgPSByZXF1aXJlKCcuL0lnZUNsYXNzJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBjbGFzcyB3aXRoIHRoZSBjYXBhYmlsaXR5IHRvIGVtaXQgZXZlbnRzLlxuICovXG52YXIgSWdlRXZlbnRpbmdDbGFzcyA9IElnZUNsYXNzLmV4dGVuZCh7XG5cdGNsYXNzSWQ6ICdJZ2VFdmVudGluZ0NsYXNzJyxcblxuXHQvKipcblx0ICogQWRkIGFuIGV2ZW50IGxpc3RlbmVyIG1ldGhvZCBmb3IgYW4gZXZlbnQuXG5cdCAqIEBwYXJhbSB7U3RyaW5nIHx8IEFycmF5fSBldmVudE5hbWUgVGhlIG5hbWUgb2YgdGhlIGV2ZW50IHRvIGxpc3RlbiBmb3IgKHN0cmluZyksIG9yIGFuIGFycmF5IG9mIGV2ZW50cyB0byBsaXN0ZW4gZm9yLlxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsIFRoZSBtZXRob2QgdG8gY2FsbCB3aGVuIHRoZSBldmVudCBsaXN0ZW5lciBpcyB0cmlnZ2VyZWQuXG5cdCAqIEBwYXJhbSB7T2JqZWN0PX0gY29udGV4dCBUaGUgY29udGV4dCBpbiB3aGljaCB0aGUgY2FsbCB0byB0aGUgbGlzdGVuaW5nIG1ldGhvZCB3aWxsIGJlIG1hZGUgKHNldHMgdGhlICd0aGlzJyB2YXJpYWJsZSBpbiB0aGUgbWV0aG9kIHRvIHRoZSBvYmplY3QgcGFzc2VkIGFzIHRoaXMgcGFyYW1ldGVyKS5cblx0ICogQHBhcmFtIHtCb29sZWFuPX0gb25lU2hvdCBJZiBzZXQsIHdpbGwgaW5zdHJ1Y3QgdGhlIGxpc3RlbmVyIHRvIG9ubHkgbGlzdGVuIHRvIHRoZSBldmVudCBiZWluZyBmaXJlZCBvbmNlIGFuZCB3aWxsIG5vdCBmaXJlIGFnYWluLlxuXHQgKiBAcGFyYW0ge0Jvb2xlYW49fSBzZW5kRXZlbnROYW1lIElmIHNldCwgd2lsbCBpbnN0cnVjdCB0aGUgZW1pdHRlciB0byBzZW5kIHRoZSBldmVudCBuYW1lIGFzIHRoZSBhcmd1bWVudCBpbnN0ZWFkIG9mIGFueSBlbWl0dGVkIGFyZ3VtZW50cy5cblx0ICogQHJldHVybiB7T2JqZWN0fSBUaGUgZXZlbnQgbGlzdGVuZXIgb2JqZWN0LiBIb2xkIHRoaXMgdmFsdWUgaWYgeW91IGxhdGVyIHdhbnQgdG8gdHVybiBvZmYgdGhlIGV2ZW50IGxpc3RlbmVyLlxuXHQgKiBAZXhhbXBsZSAjQWRkIGFuIEV2ZW50IExpc3RlbmVyXG5cdCAqICAgICAvLyBSZWdpc3RlciBldmVudCBsaXN0ZXIgYW5kIHN0b3JlIGluIFwiZXZ0XCJcblx0ICogICAgIHZhciBldnQgPSBteUVudGl0eS5vbignbW91c2VEb3duJywgZnVuY3Rpb24gKCkgeyBjb25zb2xlLmxvZygnZG93bicpOyB9KTtcblx0ICogQGV4YW1wbGUgI0xpc3RlbiBmb3IgRXZlbnQgRGF0YVxuXHQgKiAgICAgLy8gU2V0IGEgbGlzdGVuZXIgdG8gbGlzdGVuIGZvciB0aGUgZGF0YSAobXVsdGlwbGUgdmFsdWVzIGVtaXR0ZWRcblx0ICogICAgIC8vIGZyb20gYW4gZXZlbnQgYXJlIHBhc3NlZCBhcyBmdW5jdGlvbiBhcmd1bWVudHMpXG5cdCAqICAgICBteUVudGl0eS5vbignaGVsbG8nLCBmdW5jdGlvbiAoYXJnMSwgYXJnMikge1xuXHQgKiAgICAgICAgIGNvbnNvbGUubG9nKGFyZzEsIGFyZzIpO1xuXHQgKiAgICAgfVxuXHQgKiAgICAgXG5cdCAqICAgICAvLyBFbWl0IHRoZSBldmVudCBuYW1lZCBcImhlbGxvXCJcblx0ICogICAgIG15RW50aXR5LmVtaXQoJ2hlbGxvJywgWydkYXRhMScsICdkYXRhMiddKTtcblx0ICogICAgIFxuXHQgKiAgICAgLy8gVGhlIGNvbnNvbGUgb3V0cHV0IGlzOlxuXHQgKiAgICAgLy8gICAgZGF0YTEsIGRhdGEyXG5cdCAqL1xuXHRvbjogZnVuY3Rpb24gKGV2ZW50TmFtZSwgY2FsbCwgY29udGV4dCwgb25lU2hvdCwgc2VuZEV2ZW50TmFtZSkge1xuXHRcdHZhciBzZWxmID0gdGhpcyxcblx0XHRcdG5ld0xpc3RlbmVyLFxuXHRcdFx0YWRkTGlzdGVuZXIsXG5cdFx0XHRleGlzdGluZ0luZGV4LFxuXHRcdFx0ZWxBcnIsXG5cdFx0XHRtdWx0aUV2ZW50LFxuXHRcdFx0ZXZlbnRJbmRleCxcblx0XHRcdGV2ZW50RGF0YSxcblx0XHRcdGV2ZW50T2JqLFxuXHRcdFx0bXVsdGlFdmVudE5hbWUsXG5cdFx0XHRpO1xuXG5cdFx0Ly8gQ2hlY2sgdGhhdCB3ZSBoYXZlIGFuIGV2ZW50IGxpc3RlbmVyIG9iamVjdFxuXHRcdHRoaXMuX2V2ZW50TGlzdGVuZXJzID0gdGhpcy5fZXZlbnRMaXN0ZW5lcnMgfHwge307XG5cblx0XHRpZiAodHlwZW9mIGNhbGwgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdGlmICh0eXBlb2YgZXZlbnROYW1lID09PSAnc3RyaW5nJykge1xuXHRcdFx0XHQvLyBDb21wb3NlIHRoZSBuZXcgbGlzdGVuZXJcblx0XHRcdFx0bmV3TGlzdGVuZXIgPSB7XG5cdFx0XHRcdFx0Y2FsbDogY2FsbCxcblx0XHRcdFx0XHRjb250ZXh0OiBjb250ZXh0LFxuXHRcdFx0XHRcdG9uZVNob3Q6IG9uZVNob3QsXG5cdFx0XHRcdFx0c2VuZEV2ZW50TmFtZTogc2VuZEV2ZW50TmFtZVxuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdGVsQXJyID0gdGhpcy5fZXZlbnRMaXN0ZW5lcnNbZXZlbnROYW1lXSA9IHRoaXMuX2V2ZW50TGlzdGVuZXJzW2V2ZW50TmFtZV0gfHwgW107XG5cblx0XHRcdFx0Ly8gQ2hlY2sgaWYgd2UgYWxyZWFkeSBoYXZlIHRoaXMgbGlzdGVuZXIgaW4gdGhlIGxpc3Rcblx0XHRcdFx0YWRkTGlzdGVuZXIgPSB0cnVlO1xuXG5cdFx0XHRcdC8vIFRPLURPIC0gQ291bGQgdGhpcyBkbyB3aXRoIHVzaW5nIGluZGV4T2Y/IFdvdWxkIHRoYXQgd29yaz8gV291bGQgYmUgZmFzdGVyP1xuXHRcdFx0XHRleGlzdGluZ0luZGV4ID0gZWxBcnIuaW5kZXhPZihuZXdMaXN0ZW5lcik7XG5cdFx0XHRcdGlmIChleGlzdGluZ0luZGV4ID4gLTEpIHtcblx0XHRcdFx0XHRhZGRMaXN0ZW5lciA9IGZhbHNlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQWRkIHRoaXMgbmV3IGxpc3RlbmVyXG5cdFx0XHRcdGlmIChhZGRMaXN0ZW5lcikge1xuXHRcdFx0XHRcdGVsQXJyLnB1c2gobmV3TGlzdGVuZXIpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIG5ld0xpc3RlbmVyO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gVGhlIGV2ZW50TmFtZSBpcyBhbiBhcnJheSBvZiBuYW1lcywgY3JlYXRpbmcgYSBncm91cCBvZiBldmVudHNcblx0XHRcdFx0Ly8gdGhhdCBtdXN0IGJlIGZpcmVkIHRvIGZpcmUgdGhpcyBldmVudCBjYWxsYmFja1xuXHRcdFx0XHRpZiAoZXZlbnROYW1lLmxlbmd0aCkge1xuXHRcdFx0XHRcdC8vIExvb3AgdGhlIGV2ZW50IGFycmF5XG5cdFx0XHRcdFx0bXVsdGlFdmVudCA9IFtdO1xuXHRcdFx0XHRcdG11bHRpRXZlbnRbMF0gPSAwOyAvLyBUaGlzIHdpbGwgaG9sZCBvdXIgZXZlbnQgY291bnQgdG90YWxcblx0XHRcdFx0XHRtdWx0aUV2ZW50WzFdID0gMDsgLy8gVGhpcyB3aWxsIGhvbGQgb3VyIG51bWJlciBvZiBldmVudHMgZmlyZWRcblxuXHRcdFx0XHRcdC8vIERlZmluZSB0aGUgbXVsdGkgZXZlbnQgY2FsbGJhY2tcblx0XHRcdFx0XHRtdWx0aUV2ZW50WzNdID0gZnVuY3Rpb24gKGZpcmVkRXZlbnROYW1lKSB7XG5cdFx0XHRcdFx0XHRtdWx0aUV2ZW50WzFdKys7XG5cblx0XHRcdFx0XHRcdGlmIChtdWx0aUV2ZW50WzBdID09PSBtdWx0aUV2ZW50WzFdKSB7XG5cdFx0XHRcdFx0XHRcdC8vIEFsbCB0aGUgbXVsdGktZXZlbnQgZXZlbnRzIGhhdmUgZmlyZWRcblx0XHRcdFx0XHRcdFx0Ly8gc28gZmlyZSB0aGUgY2FsbGJhY2tcblx0XHRcdFx0XHRcdFx0Y2FsbC5hcHBseShjb250ZXh0IHx8IHNlbGYpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cblx0XHRcdFx0XHRmb3IgKGV2ZW50SW5kZXggaW4gZXZlbnROYW1lKSB7XG5cdFx0XHRcdFx0XHRpZiAoZXZlbnROYW1lLmhhc093blByb3BlcnR5KGV2ZW50SW5kZXgpKSB7XG5cdFx0XHRcdFx0XHRcdGV2ZW50RGF0YSA9IGV2ZW50TmFtZVtldmVudEluZGV4XTtcblx0XHRcdFx0XHRcdFx0ZXZlbnRPYmogPSBldmVudERhdGFbMF07XG5cdFx0XHRcdFx0XHRcdG11bHRpRXZlbnROYW1lID0gZXZlbnREYXRhWzFdO1xuXG5cdFx0XHRcdFx0XHRcdC8vIEluY3JlbWVudCB0aGUgZXZlbnQgbGlzdGVuaW5nIGNvdW50IHRvdGFsXG5cdFx0XHRcdFx0XHRcdG11bHRpRXZlbnRbMF0rKztcblxuXHRcdFx0XHRcdFx0XHQvLyBSZWdpc3RlciBlYWNoIGV2ZW50IGFnYWluc3QgdGhlIGV2ZW50IG9iamVjdCB3aXRoIGEgY2FsbGJhY2tcblx0XHRcdFx0XHRcdFx0ZXZlbnRPYmoub24obXVsdGlFdmVudE5hbWUsIG11bHRpRXZlbnRbM10sIG51bGwsIHRydWUsIHRydWUpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAodHlwZW9mKGV2ZW50TmFtZSkgIT09ICdzdHJpbmcnKSB7XG5cdFx0XHRcdGV2ZW50TmFtZSA9ICcqTXVsdGktRXZlbnQqJztcblx0XHRcdH1cblx0XHRcdHRoaXMubG9nKCdDYW5ub3QgcmVnaXN0ZXIgZXZlbnQgbGlzdGVuZXIgZm9yIGV2ZW50IFwiJyArIGV2ZW50TmFtZSArICdcIiBiZWNhdXNlIHRoZSBwYXNzZWQgY2FsbGJhY2sgaXMgbm90IGEgZnVuY3Rpb24hJywgJ2Vycm9yJyk7XG5cdFx0fVxuXHR9LFxuXHRcblx0LyoqXG5cdCAqIFJlbW92ZSBhbiBldmVudCBsaXN0ZW5lci4gSWYgdGhlIF9wcm9jZXNzaW5nIGZsYWcgaXMgdHJ1ZVxuXHQgKiB0aGVuIHRoZSByZW1vdmFsIHdpbGwgYmUgcGxhY2VkIGluIHRoZSByZW1vdmFscyBhcnJheSB0byBiZVxuXHQgKiBwcm9jZXNzZWQgYWZ0ZXIgdGhlIGV2ZW50IGxvb3AgaGFzIGNvbXBsZXRlZCBpbiB0aGUgZW1pdCgpXG5cdCAqIG1ldGhvZC5cblx0ICogQHBhcmFtIHtCb29sZWFufSBldmVudE5hbWUgVGhlIG5hbWUgb2YgdGhlIGV2ZW50IHlvdSBvcmlnaW5hbGx5IHJlZ2lzdGVyZWQgdG8gbGlzdGVuIGZvci5cblx0ICogQHBhcmFtIHtPYmplY3R9IGV2dExpc3RlbmVyIFRoZSBldmVudCBsaXN0ZW5lciBvYmplY3QgdG8gY2FuY2VsLiBUaGlzIG9iamVjdCBpcyB0aGUgb25lXG5cdCAqIHJldHVybmVkIHdoZW4gY2FsbGluZyB0aGUgb24oKSBtZXRob2QuIEl0IGlzIE5PVCB0aGUgbWV0aG9kIHlvdSBwYXNzZWQgYXMgdGhlIHNlY29uZCBhcmd1bWVudFxuXHQgKiB0byB0aGUgb24oKSBtZXRob2QuXG5cdCAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIFRoZSBjYWxsYmFjayBtZXRob2QgdG8gY2FsbCB3aGVuIHRoZSBldmVudCBsaXN0ZW5lciBoYXMgYmVlblxuXHQgKiBzdWNjZXNzZnVsbHkgcmVtb3ZlZC4gSWYgeW91IGF0dGVtcHQgdG8gcmVtb3ZlIGEgbGlzdGVuZXIgZHVyaW5nIHRoZSBldmVudCBmaXJpbmcgbG9vcFxuXHQgKiB0aGVuIHRoZSBsaXN0ZW5lciB3aWxsIG5vdCBpbW1lZGlhdGVseSBiZSByZW1vdmVkIGJ1dCB3aWxsIGJlIHF1ZXVlZCBmb3IgcmVtb3ZhbCBiZWZvcmVcblx0ICogdGhlIG5leHQgbGlzdGVuZXIgbG9vcCBpcyBmaXJlZC4gSW4gdGhpcyBjYXNlIHlvdSBtYXkgbGlrZSB0byBiZSBpbmZvcm1lZCB2aWEgY2FsbGJhY2tcblx0ICogd2hlbiB0aGUgbGlzdGVuZXIgaGFzIGJlZW4gZnVsbHkgcmVtb3ZlZCBpbiB3aGljaCBjYXNlLCBwcm92aWRlIGEgbWV0aG9kIGZvciB0aGlzIGFyZ3VtZW50LlxuXHQgKiBcblx0ICogVGhlIGNhbGxiYWNrIHdpbGwgYmUgcGFzc2VkIGEgc2luZ2xlIGJvb2xlYW4gYXJndW1lbnQgZGVub3RpbmcgaWYgdGhlIHJlbW92YWwgd2FzIHN1Y2Nlc3NmdWxcblx0ICogKHRydWUpIG9yIHRoZSBsaXN0ZW5lciBkaWQgbm90IGV4aXN0IHRvIHJlbW92ZSAoZmFsc2UpLlxuXHQgKiBAZXhhbXBsZSAjU3dpdGNoIG9mZiBhbiBFdmVudCBMaXN0ZW5lclxuXHQgKiAgICAgLy8gUmVnaXN0ZXIgZXZlbnQgbGlzdGVyIGFuZCBzdG9yZSBpbiBcImV2dFwiXG5cdCAqICAgICB2YXIgZXZ0ID0gbXlFbnRpdHkub24oJ21vdXNlRG93bicsIGZ1bmN0aW9uICgpIHsgY29uc29sZS5sb2coJ2Rvd24nKTsgfSk7XG5cdCAqICAgICBcblx0ICogICAgIC8vIFN3aXRjaCBvZmYgZXZlbnQgbGlzdGVuZXJcblx0ICogICAgIG15RW50aXR5Lm9mZignbW91c2VEb3duJywgZXZ0KTtcblx0ICogQHJldHVybiB7Qm9vbGVhbn1cblx0ICovXG5cdG9mZjogZnVuY3Rpb24gKGV2ZW50TmFtZSwgZXZ0TGlzdGVuZXIsIGNhbGxiYWNrKSB7XG5cdFx0aWYgKHRoaXMuX2V2ZW50TGlzdGVuZXJzKSB7XG5cdFx0XHRpZiAoIXRoaXMuX2V2ZW50TGlzdGVuZXJzLl9wcm9jZXNzaW5nKSB7XG5cdFx0XHRcdGlmICh0aGlzLl9ldmVudExpc3RlbmVyc1tldmVudE5hbWVdKSB7XG5cdFx0XHRcdFx0Ly8gRmluZCB0aGlzIGxpc3RlbmVyIGluIHRoZSBsaXN0XG5cdFx0XHRcdFx0dmFyIGV2dExpc3RJbmRleCA9IHRoaXMuX2V2ZW50TGlzdGVuZXJzW2V2ZW50TmFtZV0uaW5kZXhPZihldnRMaXN0ZW5lcik7XG5cdFx0XHRcdFx0aWYgKGV2dExpc3RJbmRleCA+IC0xKSB7XG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgdGhlIGxpc3RlbmVyIGZyb20gdGhlIGV2ZW50IGxpc3RlbmVyIGxpc3Rcblx0XHRcdFx0XHRcdHRoaXMuX2V2ZW50TGlzdGVuZXJzW2V2ZW50TmFtZV0uc3BsaWNlKGV2dExpc3RJbmRleCwgMSk7XG5cdFx0XHRcdFx0XHRpZiAoY2FsbGJhY2spIHtcblx0XHRcdFx0XHRcdFx0Y2FsbGJhY2sodHJ1ZSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dGhpcy5sb2coJ0ZhaWxlZCB0byBjYW5jZWwgZXZlbnQgbGlzdGVuZXIgZm9yIGV2ZW50IG5hbWVkIFwiJyArIGV2ZW50TmFtZSArICdcIiAhJywgJ3dhcm5pbmcnLCBldnRMaXN0ZW5lcik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRoaXMubG9nKCdGYWlsZWQgdG8gY2FuY2VsIGV2ZW50IGxpc3RlbmVyIScpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBBZGQgdGhlIHJlbW92YWwgdG8gYSByZW1vdmUgcXVldWUgc2luY2Ugd2UgYXJlIHByb2Nlc3Npbmdcblx0XHRcdFx0Ly8gbGlzdGVuZXJzIGF0IHRoZSBtb21lbnQgYW5kIHJlbW92aW5nIG9uZSB3b3VsZCBtZXNzIHVwIHRoZVxuXHRcdFx0XHQvLyBsb29wIVxuXHRcdFx0XHR0aGlzLl9ldmVudExpc3RlbmVycy5fcmVtb3ZlUXVldWUgPSB0aGlzLl9ldmVudExpc3RlbmVycy5fcmVtb3ZlUXVldWUgfHwgW107XG5cdFx0XHRcdHRoaXMuX2V2ZW50TGlzdGVuZXJzLl9yZW1vdmVRdWV1ZS5wdXNoKFtldmVudE5hbWUsIGV2dExpc3RlbmVyLCBjYWxsYmFja10pO1xuXG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoY2FsbGJhY2spIHtcblx0XHRcdGNhbGxiYWNrKGZhbHNlKTtcblx0XHR9XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBFbWl0IGFuIGV2ZW50IGJ5IG5hbWUuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBldmVudE5hbWUgVGhlIG5hbWUgb2YgdGhlIGV2ZW50IHRvIGVtaXQuXG5cdCAqIEBwYXJhbSB7T2JqZWN0IHx8IEFycmF5fSBhcmdzIFRoZSBhcmd1bWVudHMgdG8gc2VuZCB0byBhbnkgbGlzdGVuaW5nIG1ldGhvZHMuXG5cdCAqIElmIHlvdSBhcmUgc2VuZGluZyBtdWx0aXBsZSBhcmd1bWVudHMsIHVzZSBhbiBhcnJheSBjb250YWluaW5nIGVhY2ggYXJndW1lbnQuXG5cdCAqIEByZXR1cm4ge051bWJlcn1cblx0ICogQGV4YW1wbGUgI0VtaXQgYW4gRXZlbnRcblx0ICogICAgIC8vIEVtaXQgdGhlIGV2ZW50IG5hbWVkIFwiaGVsbG9cIlxuXHQgKiAgICAgbXlFbnRpdHkuZW1pdCgnaGVsbG8nKTtcblx0ICogQGV4YW1wbGUgI0VtaXQgYW4gRXZlbnQgV2l0aCBEYXRhIE9iamVjdFxuXHQgKiAgICAgLy8gRW1pdCB0aGUgZXZlbnQgbmFtZWQgXCJoZWxsb1wiXG5cdCAqICAgICBteUVudGl0eS5lbWl0KCdoZWxsbycsIHttb286IHRydWV9KTtcblx0ICogQGV4YW1wbGUgI0VtaXQgYW4gRXZlbnQgV2l0aCBNdWx0aXBsZSBEYXRhIFZhbHVlc1xuXHQgKiAgICAgLy8gRW1pdCB0aGUgZXZlbnQgbmFtZWQgXCJoZWxsb1wiXG5cdCAqICAgICBteUVudGl0eS5lbWl0KCdoZWxsbycsIFt7bW9vOiB0cnVlfSwgJ3NvbWVTdHJpbmcnXSk7XG5cdCAqIEBleGFtcGxlICNMaXN0ZW4gZm9yIEV2ZW50IERhdGFcblx0ICogICAgIC8vIFNldCBhIGxpc3RlbmVyIHRvIGxpc3RlbiBmb3IgdGhlIGRhdGEgKG11bHRpcGxlIHZhbHVlcyBlbWl0dGVkXG5cdCAqICAgICAvLyBmcm9tIGFuIGV2ZW50IGFyZSBwYXNzZWQgYXMgZnVuY3Rpb24gYXJndW1lbnRzKVxuXHQgKiAgICAgbXlFbnRpdHkub24oJ2hlbGxvJywgZnVuY3Rpb24gKGFyZzEsIGFyZzIpIHtcblx0ICogICAgICAgICBjb25zb2xlLmxvZyhhcmcxLCBhcmcyKTtcblx0ICogICAgIH1cblx0ICogICAgIFxuXHQgKiAgICAgLy8gRW1pdCB0aGUgZXZlbnQgbmFtZWQgXCJoZWxsb1wiXG5cdCAqICAgICBteUVudGl0eS5lbWl0KCdoZWxsbycsIFsnZGF0YTEnLCAnZGF0YTInXSk7XG5cdCAqICAgICBcblx0ICogICAgIC8vIFRoZSBjb25zb2xlIG91dHB1dCBpczpcblx0ICogICAgIC8vICAgIGRhdGExLCBkYXRhMlxuXHQgKi9cblx0ZW1pdDogZnVuY3Rpb24gKGV2ZW50TmFtZSwgYXJncykge1xuXHRcdGlmICh0aGlzLl9ldmVudExpc3RlbmVycykge1xuXHRcdFx0Ly8gQ2hlY2sgaWYgdGhlIGV2ZW50IGhhcyBhbnkgbGlzdGVuZXJzXG5cdFx0XHRpZiAodGhpcy5fZXZlbnRMaXN0ZW5lcnNbZXZlbnROYW1lXSkge1xuXG5cdFx0XHRcdC8vIEZpcmUgdGhlIGxpc3RlbmVycyBmb3IgdGhpcyBldmVudFxuXHRcdFx0XHR2YXIgZXZlbnRDb3VudCA9IHRoaXMuX2V2ZW50TGlzdGVuZXJzW2V2ZW50TmFtZV0ubGVuZ3RoLFxuXHRcdFx0XHRcdGV2ZW50Q291bnQyID0gdGhpcy5fZXZlbnRMaXN0ZW5lcnNbZXZlbnROYW1lXS5sZW5ndGggLSAxLFxuXHRcdFx0XHRcdGZpbmFsQXJncywgaSwgY2FuY2VsRmxhZywgZXZlbnRJbmRleCwgdGVtcEV2dCwgcmV0VmFsO1xuXG5cdFx0XHRcdC8vIElmIHRoZXJlIGFyZSBzb21lIGV2ZW50cywgZW5zdXJlIHRoYXQgdGhlIGFyZ3MgaXMgcmVhZHkgdG8gYmUgdXNlZFxuXHRcdFx0XHRpZiAoZXZlbnRDb3VudCkge1xuXHRcdFx0XHRcdGZpbmFsQXJncyA9IFtdO1xuXHRcdFx0XHRcdGlmICh0eXBlb2YoYXJncykgPT09ICdvYmplY3QnICYmIGFyZ3MgIT09IG51bGwgJiYgYXJnc1swXSAhPT0gbnVsbCAmJiBhcmdzWzBdICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRcdGZvciAoaSBpbiBhcmdzKSB7XG5cdFx0XHRcdFx0XHRcdGlmIChhcmdzLmhhc093blByb3BlcnR5KGkpKSB7XG5cdFx0XHRcdFx0XHRcdFx0ZmluYWxBcmdzW2ldID0gYXJnc1tpXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRmaW5hbEFyZ3MgPSBbYXJnc107XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTG9vcCBhbmQgZW1pdCFcblx0XHRcdFx0XHRjYW5jZWxGbGFnID0gZmFsc2U7XG5cblx0XHRcdFx0XHR0aGlzLl9ldmVudExpc3RlbmVycy5fcHJvY2Vzc2luZyA9IHRydWU7XG5cdFx0XHRcdFx0d2hpbGUgKGV2ZW50Q291bnQtLSkge1xuXHRcdFx0XHRcdFx0ZXZlbnRJbmRleCA9IGV2ZW50Q291bnQyIC0gZXZlbnRDb3VudDtcblx0XHRcdFx0XHRcdHRlbXBFdnQgPSB0aGlzLl9ldmVudExpc3RlbmVyc1tldmVudE5hbWVdW2V2ZW50SW5kZXhdO1xuXG5cblx0XHRcdFx0XHRcdC8vIElmIHRoZSBzZW5kRXZlbnROYW1lIGZsYWcgaXMgc2V0LCBvdmVyd3JpdGUgdGhlIGFyZ3VtZW50cyB3aXRoIHRoZSBldmVudCBuYW1lXG5cdFx0XHRcdFx0XHRpZiAodGVtcEV2dC5zZW5kRXZlbnROYW1lKSB7IGZpbmFsQXJncyA9IFtldmVudE5hbWVdOyB9XG5cblx0XHRcdFx0XHRcdC8vIENhbGwgdGhlIGNhbGxiYWNrXG5cdFx0XHRcdFx0XHRyZXRWYWwgPSB0ZW1wRXZ0LmNhbGwuYXBwbHkodGVtcEV2dC5jb250ZXh0IHx8IHRoaXMsIGZpbmFsQXJncyk7XG5cblx0XHRcdFx0XHRcdC8vIElmIHRoZSByZXRWYWwgPT09IHRydWUgdGhlbiBzdG9yZSB0aGUgY2FuY2VsIGZsYWcgYW5kIHJldHVybiB0byB0aGUgZW1pdHRpbmcgbWV0aG9kXG5cdFx0XHRcdFx0XHRpZiAocmV0VmFsID09PSB0cnVlKSB7XG5cdFx0XHRcdFx0XHRcdC8vIFRoZSByZWNlaXZlciBtZXRob2QgYXNrZWQgdXMgdG8gc2VuZCBhIGNhbmNlbCByZXF1ZXN0IGJhY2sgdG8gdGhlIGVtaXR0ZXJcblx0XHRcdFx0XHRcdFx0Y2FuY2VsRmxhZyA9IHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIENoZWNrIGlmIHdlIHNob3VsZCBub3cgY2FuY2VsIHRoZSBldmVudFxuXHRcdFx0XHRcdFx0aWYgKHRlbXBFdnQub25lU2hvdCkge1xuXHRcdFx0XHRcdFx0XHQvLyBUaGUgZXZlbnQgaGFzIGEgb25lU2hvdCBmbGFnIHNvIHNpbmNlIHdlIGhhdmUgZmlyZWQgdGhlIGV2ZW50LFxuXHRcdFx0XHRcdFx0XHQvLyBsZXRzIGNhbmNlbCB0aGUgbGlzdGVuZXIgbm93XG5cdFx0XHRcdFx0XHRcdGlmICh0aGlzLm9mZihldmVudE5hbWUsIHRlbXBFdnQpID09PSB0cnVlKSB7XG5cdFx0XHRcdFx0XHRcdFx0ZXZlbnRDb3VudDItLTtcdFxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gQ2hlY2sgdGhhdCB0aGUgYXJyYXkgc3RpbGwgZXhpc3RzIGJlY2F1c2UgYW4gZXZlbnRcblx0XHRcdFx0XHQvLyBjb3VsZCBoYXZlIHRyaWdnZXJlZCBhIG1ldGhvZCB0aGF0IGRlc3Ryb3llZCBvdXIgb2JqZWN0XG5cdFx0XHRcdFx0Ly8gd2hpY2ggd291bGQgaGF2ZSBkZWxldGVkIHRoZSBhcnJheSFcblx0XHRcdFx0XHRpZiAodGhpcy5fZXZlbnRMaXN0ZW5lcnMpIHtcblx0XHRcdFx0XHRcdHRoaXMuX2V2ZW50TGlzdGVuZXJzLl9wcm9jZXNzaW5nID0gZmFsc2U7XG5cblx0XHRcdFx0XHRcdC8vIE5vdyBwcm9jZXNzIGFueSBldmVudCByZW1vdmFsXG5cdFx0XHRcdFx0XHR0aGlzLl9wcm9jZXNzUmVtb3ZhbHMoKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoY2FuY2VsRmxhZykge1xuXHRcdFx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHQvKipcblx0ICogUmV0dXJucyBhbiBvYmplY3QgY29udGFpbmluZyB0aGUgY3VycmVudCBldmVudCBsaXN0ZW5lcnMuXG5cdCAqIEByZXR1cm4ge09iamVjdH1cblx0ICovXG5cdGV2ZW50TGlzdDogZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiB0aGlzLl9ldmVudExpc3RlbmVycztcblx0fSxcblx0XG5cdC8qKlxuXHQgKiBMb29wcyB0aGUgcmVtb3ZhbHMgYXJyYXkgYW5kIHByb2Nlc3NlcyBvZmYoKSBjYWxscyBmb3Jcblx0ICogZWFjaCBhcnJheSBpdGVtLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X3Byb2Nlc3NSZW1vdmFsczogZnVuY3Rpb24gKCkge1xuXHRcdGlmICh0aGlzLl9ldmVudExpc3RlbmVycykge1xuXHRcdFx0dmFyIHJlbUFyciA9IHRoaXMuX2V2ZW50TGlzdGVuZXJzLl9yZW1vdmVRdWV1ZSxcblx0XHRcdFx0YXJyQ291bnQsXG5cdFx0XHRcdGl0ZW0sXG5cdFx0XHRcdHJlc3VsdDtcblxuXHRcdFx0Ly8gSWYgdGhlIHJlbW92YWwgYXJyYXkgZXhpc3RzXG5cdFx0XHRpZiAocmVtQXJyKSB7XG5cdFx0XHRcdC8vIEdldCB0aGUgbnVtYmVyIG9mIGl0ZW1zIGluIHRoZSByZW1vdmFsIGFycmF5XG5cdFx0XHRcdGFyckNvdW50ID0gcmVtQXJyLmxlbmd0aDtcblxuXHRcdFx0XHQvLyBMb29wIHRoZSBhcnJheVxuXHRcdFx0XHR3aGlsZSAoYXJyQ291bnQtLSkge1xuXHRcdFx0XHRcdGl0ZW0gPSByZW1BcnJbYXJyQ291bnRdO1xuXG5cdFx0XHRcdFx0Ly8gQ2FsbCB0aGUgb2ZmKCkgbWV0aG9kIGZvciB0aGlzIGl0ZW1cblx0XHRcdFx0XHRyZXN1bHQgPSB0aGlzLm9mZihpdGVtWzBdLCBpdGVtWzFdKTtcblxuXHRcdFx0XHRcdC8vIENoZWNrIGlmIHRoZXJlIGlzIGEgY2FsbGJhY2tcblx0XHRcdFx0XHRpZiAodHlwZW9mIHJlbUFyclsyXSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0XHRcdFx0Ly8gQ2FsbCB0aGUgY2FsbGJhY2sgd2l0aCB0aGUgcmVtb3ZhbCByZXN1bHRcblx0XHRcdFx0XHRcdHJlbUFyclsyXShyZXN1bHQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZW1vdmUgdGhlIHJlbW92YWwgYXJyYXlcblx0XHRcdGRlbGV0ZSB0aGlzLl9ldmVudExpc3RlbmVycy5fcmVtb3ZlUXVldWU7XG5cdFx0fVxuXHR9XG59KTtcblxuaWYgKHR5cGVvZihtb2R1bGUpICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YobW9kdWxlLmV4cG9ydHMpICE9PSAndW5kZWZpbmVkJykgeyBtb2R1bGUuZXhwb3J0cyA9IElnZUV2ZW50aW5nQ2xhc3M7IH1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvY29tcG9uZW50cy9jb21tb24vSWdlRXZlbnRpbmdDbGFzcy5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

eval("\nvar IgeClass = __webpack_require__(0);\nvar IgeNetIoClientComponent = __webpack_require__(5);\n\nvar RtsClient = IgeClass.extend({\n    classId: 'Client',\n\n    init: function () {\n        var self = this;\n\n        console.log('Start Client::init');\n\n        this.addComponent(IgeNetIoClientComponent);\n        this.network.start('http://localhost:3003', function () {\n            console.log('Start Client::network::start');\n\n            self.network.define('someEvent', function () {\n                console.log('client::someEvent: ', arguments);\n            });\n\n            self.network.send('someEvent', { msg: 'from client' });\n        });\n    }\n});\n\nvar rtsClientInstance = new RtsClient();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvY2xpZW50LmpzPzZmYzgiXSwibmFtZXMiOlsiSWdlQ2xhc3MiLCJyZXF1aXJlIiwiSWdlTmV0SW9DbGllbnRDb21wb25lbnQiLCJSdHNDbGllbnQiLCJleHRlbmQiLCJjbGFzc0lkIiwiaW5pdCIsInNlbGYiLCJjb25zb2xlIiwibG9nIiwiYWRkQ29tcG9uZW50IiwibmV0d29yayIsInN0YXJ0IiwiZGVmaW5lIiwiYXJndW1lbnRzIiwic2VuZCIsIm1zZyIsInJ0c0NsaWVudEluc3RhbmNlIl0sIm1hcHBpbmdzIjoiO0FBQ0EsSUFBSUEsV0FBVyxtQkFBQUMsQ0FBUSxDQUFSLENBQWY7QUFDQSxJQUFJQywwQkFBMEIsbUJBQUFELENBQVEsQ0FBUixDQUE5Qjs7QUFHQSxJQUFJRSxZQUFZSCxTQUFTSSxNQUFULENBQWdCO0FBQy9CQyxhQUFTLFFBRHNCOztBQUc1QkMsVUFBTSxZQUFZO0FBQ2QsWUFBSUMsT0FBTyxJQUFYOztBQUVBQyxnQkFBUUMsR0FBUixDQUFZLG9CQUFaOztBQUVBLGFBQUtDLFlBQUwsQ0FBa0JSLHVCQUFsQjtBQUNBLGFBQUtTLE9BQUwsQ0FBYUMsS0FBYixDQUFtQix1QkFBbkIsRUFBNEMsWUFBWTtBQUNwREosb0JBQVFDLEdBQVIsQ0FBWSw4QkFBWjs7QUFFQUYsaUJBQUtJLE9BQUwsQ0FBYUUsTUFBYixDQUFvQixXQUFwQixFQUFpQyxZQUFZO0FBQUVMLHdCQUFRQyxHQUFSLENBQVkscUJBQVosRUFBbUNLLFNBQW5DO0FBQWdELGFBQS9GOztBQUVBUCxpQkFBS0ksT0FBTCxDQUFhSSxJQUFiLENBQWtCLFdBQWxCLEVBQStCLEVBQUNDLEtBQUksYUFBTCxFQUEvQjtBQUVILFNBUEQ7QUFTSDtBQWxCMkIsQ0FBaEIsQ0FBaEI7O0FBcUJBLElBQUlDLG9CQUFvQixJQUFJZCxTQUFKLEVBQXhCIiwiZmlsZSI6IjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbnZhciBJZ2VDbGFzcyA9IHJlcXVpcmUoJy4vY29tcG9uZW50cy9jb21tb24vSWdlQ2xhc3MnKTtcbnZhciBJZ2VOZXRJb0NsaWVudENvbXBvbmVudCA9IHJlcXVpcmUoJy4vY29tcG9uZW50cy9jb21tb24vSWdlTmV0SW9DbGllbnRDb21wb25lbnQnKTtcblxuXG52YXIgUnRzQ2xpZW50ID0gSWdlQ2xhc3MuZXh0ZW5kKHtcblx0Y2xhc3NJZDogJ0NsaWVudCcsXG5cbiAgICBpbml0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgICBjb25zb2xlLmxvZygnU3RhcnQgQ2xpZW50Ojppbml0Jyk7XG5cbiAgICAgICAgdGhpcy5hZGRDb21wb25lbnQoSWdlTmV0SW9DbGllbnRDb21wb25lbnQpO1xuICAgICAgICB0aGlzLm5ldHdvcmsuc3RhcnQoJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdTdGFydCBDbGllbnQ6Om5ldHdvcms6OnN0YXJ0Jyk7XG5cbiAgICAgICAgICAgIHNlbGYubmV0d29yay5kZWZpbmUoJ3NvbWVFdmVudCcsIGZ1bmN0aW9uICgpIHsgY29uc29sZS5sb2coJ2NsaWVudDo6c29tZUV2ZW50OiAnLCBhcmd1bWVudHMpOyB9KTtcblxuICAgICAgICAgICAgc2VsZi5uZXR3b3JrLnNlbmQoJ3NvbWVFdmVudCcsIHttc2c6J2Zyb20gY2xpZW50J30pO1xuXG4gICAgICAgIH0pO1xuXG4gICAgfSxcbn0pO1xuXG52YXIgcnRzQ2xpZW50SW5zdGFuY2UgPSBuZXcgUnRzQ2xpZW50KCk7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL2NsaWVudC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3\n");

/***/ }),
/* 4 */
/***/ (function(module, exports) {

eval("\nigeConfig = {\n\tdebug: {\n\t\t_enabled: true,\n\t\t_node: typeof module !== 'undefined' && typeof module.exports !== 'undefined',\n\t\t_level: ['log', 'warning', 'error'],\n\t\t_stacks: true,\n\t\t_throwErrors: true,\n\t\t_timing: true,\n\t\tenabled: function (val) {\n\t\t\tif (val !== undefined) {\n\t\t\t\tthis._enabled = val;\n\n\t\t\t\tif (!val) {\n\t\t\t\t\tthis._timing = false;\n\n\t\t\t\t\t// Check if the engine exists\n\t\t\t\t\tif (ige) {\n\t\t\t\t\t\t// Turn off stats display in the engine\n\t\t\t\t\t\tige.showStats(0);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n};\n\nif (igeConfig.debug._node) {\n\tigeConfig.debug._util = function () {}; //require('util');\n}\n\nif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n\tmodule.exports = igeConfig;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvY29tcG9uZW50cy9jb21tb24vaWdlQ29uZmlnLmpzPzA4ZjkiXSwibmFtZXMiOlsiaWdlQ29uZmlnIiwiZGVidWciLCJfZW5hYmxlZCIsIl9ub2RlIiwibW9kdWxlIiwiZXhwb3J0cyIsIl9sZXZlbCIsIl9zdGFja3MiLCJfdGhyb3dFcnJvcnMiLCJfdGltaW5nIiwiZW5hYmxlZCIsInZhbCIsInVuZGVmaW5lZCIsImlnZSIsInNob3dTdGF0cyIsIl91dGlsIl0sIm1hcHBpbmdzIjoiO0FBQ0FBLFlBQVk7QUFDWEMsUUFBTztBQUNOQyxZQUFVLElBREo7QUFFTkMsU0FBTyxPQUFPQyxNQUFQLEtBQW1CLFdBQW5CLElBQWtDLE9BQU9BLE9BQU9DLE9BQWQsS0FBMkIsV0FGOUQ7QUFHTkMsVUFBUSxDQUFDLEtBQUQsRUFBUSxTQUFSLEVBQW1CLE9BQW5CLENBSEY7QUFJTkMsV0FBUyxJQUpIO0FBS05DLGdCQUFjLElBTFI7QUFNTkMsV0FBUyxJQU5IO0FBT05DLFdBQVMsVUFBVUMsR0FBVixFQUFlO0FBQ3ZCLE9BQUlBLFFBQVFDLFNBQVosRUFBdUI7QUFDdEIsU0FBS1YsUUFBTCxHQUFnQlMsR0FBaEI7O0FBRUEsUUFBSSxDQUFDQSxHQUFMLEVBQVU7QUFDVCxVQUFLRixPQUFMLEdBQWUsS0FBZjs7QUFFQTtBQUNBLFNBQUlJLEdBQUosRUFBUztBQUNSO0FBQ0FBLFVBQUlDLFNBQUosQ0FBYyxDQUFkO0FBQ0E7QUFDRDs7QUFFRCxXQUFPLElBQVA7QUFDQTs7QUFFRCxVQUFPLEtBQUtaLFFBQVo7QUFDQTtBQXpCSztBQURJLENBQVo7O0FBOEJBLElBQUlGLFVBQVVDLEtBQVYsQ0FBZ0JFLEtBQXBCLEVBQTJCO0FBQzFCSCxXQUFVQyxLQUFWLENBQWdCYyxLQUFoQixHQUF3QixZQUFZLENBQUUsQ0FBdEMsQ0FEMEIsQ0FDZTtBQUN6Qzs7QUFFRCxJQUFJLE9BQU9YLE1BQVAsS0FBbUIsV0FBbkIsSUFBa0MsT0FBT0EsT0FBT0MsT0FBZCxLQUEyQixXQUFqRSxFQUE4RTtBQUFFRCxRQUFPQyxPQUFQLEdBQWlCTCxTQUFqQjtBQUE2QiIsImZpbGUiOiI0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pZ2VDb25maWcgPSB7XG5cdGRlYnVnOiB7XG5cdFx0X2VuYWJsZWQ6IHRydWUsXG5cdFx0X25vZGU6IHR5cGVvZihtb2R1bGUpICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YobW9kdWxlLmV4cG9ydHMpICE9PSAndW5kZWZpbmVkJyxcblx0XHRfbGV2ZWw6IFsnbG9nJywgJ3dhcm5pbmcnLCAnZXJyb3InXSxcblx0XHRfc3RhY2tzOiB0cnVlLFxuXHRcdF90aHJvd0Vycm9yczogdHJ1ZSxcblx0XHRfdGltaW5nOiB0cnVlLFxuXHRcdGVuYWJsZWQ6IGZ1bmN0aW9uICh2YWwpIHtcblx0XHRcdGlmICh2YWwgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHR0aGlzLl9lbmFibGVkID0gdmFsO1xuXHRcblx0XHRcdFx0aWYgKCF2YWwpIHtcblx0XHRcdFx0XHR0aGlzLl90aW1pbmcgPSBmYWxzZTtcblx0XG5cdFx0XHRcdFx0Ly8gQ2hlY2sgaWYgdGhlIGVuZ2luZSBleGlzdHNcblx0XHRcdFx0XHRpZiAoaWdlKSB7XG5cdFx0XHRcdFx0XHQvLyBUdXJuIG9mZiBzdGF0cyBkaXNwbGF5IGluIHRoZSBlbmdpbmVcblx0XHRcdFx0XHRcdGlnZS5zaG93U3RhdHMoMCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH1cblx0XG5cdFx0XHRyZXR1cm4gdGhpcy5fZW5hYmxlZDtcblx0XHR9XG5cdH1cbn07XG5cbmlmIChpZ2VDb25maWcuZGVidWcuX25vZGUpIHtcblx0aWdlQ29uZmlnLmRlYnVnLl91dGlsID0gZnVuY3Rpb24gKCkge307IFx0Ly9yZXF1aXJlKCd1dGlsJyk7XG59XG5cbmlmICh0eXBlb2YobW9kdWxlKSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mKG1vZHVsZS5leHBvcnRzKSAhPT0gJ3VuZGVmaW5lZCcpIHsgbW9kdWxlLmV4cG9ydHMgPSBpZ2VDb25maWc7IH1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2FwcC9jb21wb25lbnRzL2NvbW1vbi9pZ2VDb25maWcuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4\n");

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

eval("\nvar ige = __webpack_require__(1);\n\nvar IgeTimeSyncExtension = __webpack_require__(6);\nvar IgeEventingClass = __webpack_require__(2);\n\n//var IgeNetIoServer = require('../net.io/IgeNetIoServer');\nvar IgeNetIoClient = __webpack_require__(7);\n\nvar IgeNetIoClientComponent = IgeEventingClass.extend([{ extension: IgeTimeSyncExtension, overwrite: false }], {\n\tclassId: 'IgeNetIoClientComponent',\n\tcomponentId: 'network',\n\n\tinit: function (entity, options) {\n\t\tthis._entity = entity;\n\t\tthis._options = options;\n\n\t\t// Setup the network commands storage\n\t\tthis._networkCommands = {};\n\t\tthis._networkCommandsIndex = [];\n\t\tthis._networkCommandsLookup = {};\n\n\t\t// Set some defaults\n\t\tthis._port = 8000;\n\t\tthis._debug = false;\n\t\tthis._debugCounter = 0;\n\t\tthis._debugMax = 0;\n\t\tthis._clientRooms = {};\n\n\t\t// Time sync defaults\n\t\tthis._timeSyncInterval = 10000; // Sync the client/server clocks every ten seconds by default\n\t\tthis._timeSyncLog = {};\n\t\tthis._latency = 0;\n\n\t\t/* CEXCLUDE */\n\t\t/*if (ige.isServer) {\n  \tthis.implement(IgeNetIoServer);\n  \tthis._netio = require('../net.io/NetIoServer').Server;\n  \tthis._acceptConnections = false;\n  }*/\n\t\t/* CEXCLUDE */\n\n\t\tif (ige.isClient) {\n\t\t\tthis._netio = IgeNetIoClient;\n\t\t\tthis.implement(IgeNetIoClient);\n\t\t}\n\n\t\tthis.log('Network component initiated with Net.IO version: ' + this._netio.version);\n\t},\n\n\t/**\n  * Gets / sets debug flag that determines if debug output\n  * is logged to the console.\n  * @param {Boolean=} val\n  * @return {*}\n  */\n\tdebug: function (val) {\n\t\tif (val !== undefined) {\n\t\t\tthis._debug = val;\n\t\t\treturn this._entity;\n\t\t}\n\n\t\t// Check the debug counter settings\n\t\tif (this._debugMax > 0 && this._debugCounter >= this._debugMax) {\n\t\t\tthis._debug = false;\n\t\t\tthis._debugCounter = 0;\n\t\t}\n\n\t\treturn this._debug;\n\t},\n\n\t/**\n  * Gets / sets the maximum number of debug messages that\n  * should be allowed to be output to the console before\n  * debugging is automatically turned off. This is useful\n  * if you want to sample a certain number of outputs and\n  * then automatically disable output so your console is\n  * not flooded.\n  * @param {Number=} val Number of debug messages to allow\n  * to be output to the console. Set to zero to allow\n  * infinite amounts.\n  * @return {*}\n  */\n\tdebugMax: function (val) {\n\t\tif (val !== undefined) {\n\t\t\tthis._debugMax = val;\n\t\t\treturn this._entity;\n\t\t}\n\n\t\treturn this._debugMax;\n\t}\n});\n\nif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n\tmodule.exports = IgeNetIoClientComponent;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvY29tcG9uZW50cy9jb21tb24vSWdlTmV0SW9DbGllbnRDb21wb25lbnQuanM/Yzg1NyJdLCJuYW1lcyI6WyJpZ2UiLCJyZXF1aXJlIiwiSWdlVGltZVN5bmNFeHRlbnNpb24iLCJJZ2VFdmVudGluZ0NsYXNzIiwiSWdlTmV0SW9DbGllbnQiLCJJZ2VOZXRJb0NsaWVudENvbXBvbmVudCIsImV4dGVuZCIsImV4dGVuc2lvbiIsIm92ZXJ3cml0ZSIsImNsYXNzSWQiLCJjb21wb25lbnRJZCIsImluaXQiLCJlbnRpdHkiLCJvcHRpb25zIiwiX2VudGl0eSIsIl9vcHRpb25zIiwiX25ldHdvcmtDb21tYW5kcyIsIl9uZXR3b3JrQ29tbWFuZHNJbmRleCIsIl9uZXR3b3JrQ29tbWFuZHNMb29rdXAiLCJfcG9ydCIsIl9kZWJ1ZyIsIl9kZWJ1Z0NvdW50ZXIiLCJfZGVidWdNYXgiLCJfY2xpZW50Um9vbXMiLCJfdGltZVN5bmNJbnRlcnZhbCIsIl90aW1lU3luY0xvZyIsIl9sYXRlbmN5IiwiaXNDbGllbnQiLCJfbmV0aW8iLCJpbXBsZW1lbnQiLCJsb2ciLCJ2ZXJzaW9uIiwiZGVidWciLCJ2YWwiLCJ1bmRlZmluZWQiLCJkZWJ1Z01heCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7QUFDQSxJQUFJQSxNQUFNLG1CQUFBQyxDQUFRLENBQVIsQ0FBVjs7QUFFQSxJQUFJQyx1QkFBdUIsbUJBQUFELENBQVEsQ0FBUixDQUEzQjtBQUNBLElBQUlFLG1CQUFtQixtQkFBQUYsQ0FBUSxDQUFSLENBQXZCOztBQUVBO0FBQ0EsSUFBSUcsaUJBQWlCLG1CQUFBSCxDQUFRLENBQVIsQ0FBckI7O0FBR0EsSUFBSUksMEJBQTBCRixpQkFBaUJHLE1BQWpCLENBQXdCLENBQ3JELEVBQUNDLFdBQVdMLG9CQUFaLEVBQWtDTSxXQUFXLEtBQTdDLEVBRHFELENBQXhCLEVBRTNCO0FBQ0ZDLFVBQVMseUJBRFA7QUFFRkMsY0FBYSxTQUZYOztBQUlGQyxPQUFNLFVBQVVDLE1BQVYsRUFBa0JDLE9BQWxCLEVBQTJCO0FBQ2hDLE9BQUtDLE9BQUwsR0FBZUYsTUFBZjtBQUNBLE9BQUtHLFFBQUwsR0FBZ0JGLE9BQWhCOztBQUVBO0FBQ0EsT0FBS0csZ0JBQUwsR0FBd0IsRUFBeEI7QUFDQSxPQUFLQyxxQkFBTCxHQUE2QixFQUE3QjtBQUNBLE9BQUtDLHNCQUFMLEdBQThCLEVBQTlCOztBQUVBO0FBQ0EsT0FBS0MsS0FBTCxHQUFhLElBQWI7QUFDQSxPQUFLQyxNQUFMLEdBQWMsS0FBZDtBQUNBLE9BQUtDLGFBQUwsR0FBcUIsQ0FBckI7QUFDQSxPQUFLQyxTQUFMLEdBQWlCLENBQWpCO0FBQ0EsT0FBS0MsWUFBTCxHQUFvQixFQUFwQjs7QUFFQTtBQUNBLE9BQUtDLGlCQUFMLEdBQXlCLEtBQXpCLENBakJnQyxDQWlCQTtBQUNoQyxPQUFLQyxZQUFMLEdBQW9CLEVBQXBCO0FBQ0EsT0FBS0MsUUFBTCxHQUFnQixDQUFoQjs7QUFFQTtBQUNBOzs7OztBQUtBOztBQUVBLE1BQUkxQixJQUFJMkIsUUFBUixFQUFrQjtBQUNqQixRQUFLQyxNQUFMLEdBQWN4QixjQUFkO0FBQ0EsUUFBS3lCLFNBQUwsQ0FBZXpCLGNBQWY7QUFDQTs7QUFFRCxPQUFLMEIsR0FBTCxDQUFTLHNEQUFzRCxLQUFLRixNQUFMLENBQVlHLE9BQTNFO0FBQ0EsRUF2Q0M7O0FBeUNGOzs7Ozs7QUFNQUMsUUFBTyxVQUFVQyxHQUFWLEVBQWU7QUFDckIsTUFBSUEsUUFBUUMsU0FBWixFQUF1QjtBQUN0QixRQUFLZCxNQUFMLEdBQWNhLEdBQWQ7QUFDQSxVQUFPLEtBQUtuQixPQUFaO0FBQ0E7O0FBRUQ7QUFDQSxNQUFJLEtBQUtRLFNBQUwsR0FBaUIsQ0FBakIsSUFBc0IsS0FBS0QsYUFBTCxJQUFzQixLQUFLQyxTQUFyRCxFQUFnRTtBQUMvRCxRQUFLRixNQUFMLEdBQWMsS0FBZDtBQUNBLFFBQUtDLGFBQUwsR0FBcUIsQ0FBckI7QUFDQTs7QUFFRCxTQUFPLEtBQUtELE1BQVo7QUFDQSxFQTVEQzs7QUE4REY7Ozs7Ozs7Ozs7OztBQVlBZSxXQUFVLFVBQVVGLEdBQVYsRUFBZTtBQUN4QixNQUFJQSxRQUFRQyxTQUFaLEVBQXVCO0FBQ3RCLFFBQUtaLFNBQUwsR0FBaUJXLEdBQWpCO0FBQ0EsVUFBTyxLQUFLbkIsT0FBWjtBQUNBOztBQUVELFNBQU8sS0FBS1EsU0FBWjtBQUNBO0FBakZDLENBRjJCLENBQTlCOztBQXNGQSxJQUFJLE9BQU9jLE1BQVAsS0FBbUIsV0FBbkIsSUFBa0MsT0FBT0EsT0FBT0MsT0FBZCxLQUEyQixXQUFqRSxFQUE4RTtBQUFFRCxRQUFPQyxPQUFQLEdBQWlCaEMsdUJBQWpCO0FBQTJDIiwiZmlsZSI6IjUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbnZhciBpZ2UgPSByZXF1aXJlKCcuL2lnZScpO1xuXG52YXIgSWdlVGltZVN5bmNFeHRlbnNpb24gPSByZXF1aXJlKCcuL0lnZVRpbWVTeW5jRXh0ZW5zaW9uJyk7XG52YXIgSWdlRXZlbnRpbmdDbGFzcyA9IHJlcXVpcmUoJy4vSWdlRXZlbnRpbmdDbGFzcycpO1xuXG4vL3ZhciBJZ2VOZXRJb1NlcnZlciA9IHJlcXVpcmUoJy4uL25ldC5pby9JZ2VOZXRJb1NlcnZlcicpO1xudmFyIElnZU5ldElvQ2xpZW50ID0gcmVxdWlyZSgnLi4vbmV0LmlvL0lnZU5ldElvQ2xpZW50Jyk7XG5cblxudmFyIElnZU5ldElvQ2xpZW50Q29tcG9uZW50ID0gSWdlRXZlbnRpbmdDbGFzcy5leHRlbmQoW1xuXHR7ZXh0ZW5zaW9uOiBJZ2VUaW1lU3luY0V4dGVuc2lvbiwgb3ZlcndyaXRlOiBmYWxzZX1cbl0sIHtcblx0Y2xhc3NJZDogJ0lnZU5ldElvQ2xpZW50Q29tcG9uZW50Jyxcblx0Y29tcG9uZW50SWQ6ICduZXR3b3JrJyxcblxuXHRpbml0OiBmdW5jdGlvbiAoZW50aXR5LCBvcHRpb25zKSB7XG5cdFx0dGhpcy5fZW50aXR5ID0gZW50aXR5O1xuXHRcdHRoaXMuX29wdGlvbnMgPSBvcHRpb25zO1xuXG5cdFx0Ly8gU2V0dXAgdGhlIG5ldHdvcmsgY29tbWFuZHMgc3RvcmFnZVxuXHRcdHRoaXMuX25ldHdvcmtDb21tYW5kcyA9IHt9O1xuXHRcdHRoaXMuX25ldHdvcmtDb21tYW5kc0luZGV4ID0gW107XG5cdFx0dGhpcy5fbmV0d29ya0NvbW1hbmRzTG9va3VwID0ge307XG5cblx0XHQvLyBTZXQgc29tZSBkZWZhdWx0c1xuXHRcdHRoaXMuX3BvcnQgPSA4MDAwO1xuXHRcdHRoaXMuX2RlYnVnID0gZmFsc2U7XG5cdFx0dGhpcy5fZGVidWdDb3VudGVyID0gMDtcblx0XHR0aGlzLl9kZWJ1Z01heCA9IDA7XG5cdFx0dGhpcy5fY2xpZW50Um9vbXMgPSB7fTtcblxuXHRcdC8vIFRpbWUgc3luYyBkZWZhdWx0c1xuXHRcdHRoaXMuX3RpbWVTeW5jSW50ZXJ2YWwgPSAxMDAwMDsgLy8gU3luYyB0aGUgY2xpZW50L3NlcnZlciBjbG9ja3MgZXZlcnkgdGVuIHNlY29uZHMgYnkgZGVmYXVsdFxuXHRcdHRoaXMuX3RpbWVTeW5jTG9nID0ge307XG5cdFx0dGhpcy5fbGF0ZW5jeSA9IDA7XG5cblx0XHQvKiBDRVhDTFVERSAqL1xuXHRcdC8qaWYgKGlnZS5pc1NlcnZlcikge1xuXHRcdFx0dGhpcy5pbXBsZW1lbnQoSWdlTmV0SW9TZXJ2ZXIpO1xuXHRcdFx0dGhpcy5fbmV0aW8gPSByZXF1aXJlKCcuLi9uZXQuaW8vTmV0SW9TZXJ2ZXInKS5TZXJ2ZXI7XG5cdFx0XHR0aGlzLl9hY2NlcHRDb25uZWN0aW9ucyA9IGZhbHNlO1xuXHRcdH0qL1xuXHRcdC8qIENFWENMVURFICovXG5cblx0XHRpZiAoaWdlLmlzQ2xpZW50KSB7XG5cdFx0XHR0aGlzLl9uZXRpbyA9IElnZU5ldElvQ2xpZW50O1xuXHRcdFx0dGhpcy5pbXBsZW1lbnQoSWdlTmV0SW9DbGllbnQpO1xuXHRcdH1cblxuXHRcdHRoaXMubG9nKCdOZXR3b3JrIGNvbXBvbmVudCBpbml0aWF0ZWQgd2l0aCBOZXQuSU8gdmVyc2lvbjogJyArIHRoaXMuX25ldGlvLnZlcnNpb24pO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBHZXRzIC8gc2V0cyBkZWJ1ZyBmbGFnIHRoYXQgZGV0ZXJtaW5lcyBpZiBkZWJ1ZyBvdXRwdXRcblx0ICogaXMgbG9nZ2VkIHRvIHRoZSBjb25zb2xlLlxuXHQgKiBAcGFyYW0ge0Jvb2xlYW49fSB2YWxcblx0ICogQHJldHVybiB7Kn1cblx0ICovXG5cdGRlYnVnOiBmdW5jdGlvbiAodmFsKSB7XG5cdFx0aWYgKHZhbCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHR0aGlzLl9kZWJ1ZyA9IHZhbDtcblx0XHRcdHJldHVybiB0aGlzLl9lbnRpdHk7XG5cdFx0fVxuXG5cdFx0Ly8gQ2hlY2sgdGhlIGRlYnVnIGNvdW50ZXIgc2V0dGluZ3Ncblx0XHRpZiAodGhpcy5fZGVidWdNYXggPiAwICYmIHRoaXMuX2RlYnVnQ291bnRlciA+PSB0aGlzLl9kZWJ1Z01heCkge1xuXHRcdFx0dGhpcy5fZGVidWcgPSBmYWxzZTtcblx0XHRcdHRoaXMuX2RlYnVnQ291bnRlciA9IDA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuX2RlYnVnO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBHZXRzIC8gc2V0cyB0aGUgbWF4aW11bSBudW1iZXIgb2YgZGVidWcgbWVzc2FnZXMgdGhhdFxuXHQgKiBzaG91bGQgYmUgYWxsb3dlZCB0byBiZSBvdXRwdXQgdG8gdGhlIGNvbnNvbGUgYmVmb3JlXG5cdCAqIGRlYnVnZ2luZyBpcyBhdXRvbWF0aWNhbGx5IHR1cm5lZCBvZmYuIFRoaXMgaXMgdXNlZnVsXG5cdCAqIGlmIHlvdSB3YW50IHRvIHNhbXBsZSBhIGNlcnRhaW4gbnVtYmVyIG9mIG91dHB1dHMgYW5kXG5cdCAqIHRoZW4gYXV0b21hdGljYWxseSBkaXNhYmxlIG91dHB1dCBzbyB5b3VyIGNvbnNvbGUgaXNcblx0ICogbm90IGZsb29kZWQuXG5cdCAqIEBwYXJhbSB7TnVtYmVyPX0gdmFsIE51bWJlciBvZiBkZWJ1ZyBtZXNzYWdlcyB0byBhbGxvd1xuXHQgKiB0byBiZSBvdXRwdXQgdG8gdGhlIGNvbnNvbGUuIFNldCB0byB6ZXJvIHRvIGFsbG93XG5cdCAqIGluZmluaXRlIGFtb3VudHMuXG5cdCAqIEByZXR1cm4geyp9XG5cdCAqL1xuXHRkZWJ1Z01heDogZnVuY3Rpb24gKHZhbCkge1xuXHRcdGlmICh2YWwgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0dGhpcy5fZGVidWdNYXggPSB2YWw7XG5cdFx0XHRyZXR1cm4gdGhpcy5fZW50aXR5O1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLl9kZWJ1Z01heDtcblx0fVxufSk7XG5cbmlmICh0eXBlb2YobW9kdWxlKSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mKG1vZHVsZS5leHBvcnRzKSAhPT0gJ3VuZGVmaW5lZCcpIHsgbW9kdWxlLmV4cG9ydHMgPSBJZ2VOZXRJb0NsaWVudENvbXBvbmVudDsgfVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2FwcC9jb21wb25lbnRzL2NvbW1vbi9JZ2VOZXRJb0NsaWVudENvbXBvbmVudC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5\n");

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

eval("\nvar ige = __webpack_require__(1);\n\n/**\n * Adds client/server time sync capabilities to the network system.\n * This handles calculating the time difference between the clock\n * on the server and the clock on connected clients.\n */\nvar IgeTimeSyncExtension = {\n\t/**\n  * Gets / sets the number of milliseconds between client/server\n  * clock sync events. The shorter the time, the more accurate the\n  * client simulation will be but the more network traffic you\n  * will transceive. Default value of ten seconds (10000) is usually\n  * enough to provide very accurate results without over-using the\n  * bandwidth.\n  * @param val\n  * @return {*}\n  */\n\ttimeSyncInterval: function (val) {\n\t\tif (val !== undefined) {\n\t\t\tthis._timeSyncInterval = val;\n\t\t\treturn this._entity;\n\t\t}\n\n\t\treturn this._timeSyncInterval;\n\t},\n\n\t/* CEXCLUDE */\n\ttimeSyncStart: function () {\n\t\tif (ige.isServer) {\n\t\t\tthis._timeSyncStarted = true;\n\n\t\t\t// Send a time sync request now so we\n\t\t\t// have a starting value to work with\n\t\t\tthis._sendTimeSync();\n\n\t\t\tvar self = this;\n\n\t\t\tthis.log('Starting client/server clock sync...');\n\t\t\tthis._timeSyncTimer = setInterval(function () {\n\t\t\t\tself._sendTimeSync();\n\t\t\t}, this._timeSyncInterval);\n\t\t}\n\n\t\treturn this._entity;\n\t},\n\n\ttimeSyncStop: function () {\n\t\tthis.log('Stopping client/server clock sync...');\n\t\tclearInterval(this._timeSyncTimer);\n\t\tthis._timeSyncStarted = false;\n\n\t\treturn this._entity;\n\t},\n\t/* CEXCLUDE */\n\n\t_sendTimeSync: function (data, clientId) {\n\t\tif (!data) {\n\t\t\tdata = ige._currentTime;\n\t\t}\n\n\t\t// Send the time sync command\n\t\tthis.send('_igeNetTimeSync', data, clientId);\n\t},\n\n\t/**\n  * Converts a timestamp on the client to approx. time\n  * on the server using the difference in client/server\n  * clocks and the network latency between this client\n  * and the server.\n  * @param {Number} time The client timestamp (usually\n  * the result of new Date().getTime() or\n  * ige.currentTime()).\n  */\n\ttimeToServerTime: function (time) {\n\t\tif (time !== undefined) {\n\t\t\treturn time + this._latency;\n\t\t}\n\n\t\treturn this._latency;\n\t},\n\n\t_onTimeSync: function (data, clientId) {\n\t\tvar localTime = Math.floor(ige._currentTime),\n\t\t    sendTime,\n\t\t    roundTrip,\n\t\t    direction;\n\n\t\tif (ige.isClient) {\n\t\t\tsendTime = parseInt(data, 10);\n\n\t\t\tthis._latency = localTime - sendTime;\n\n\t\t\t/*if (localTime < sendTime) {\n   \tdirection = 'behind';\n   } else if (localTime > sendTime) {\n   \tdirection = 'in front of';\n   } else {\n   \tdirection = 'same as';\n   }\n   \tthis.log('Time sync, client clock ' + (localTime - sendTime) + 'ms ' + direction + ' server, send timestamp: ' + sendTime + ', local timestamp: ' + localTime);*/\n\n\t\t\t// Send a response with out current clock time to the server\n\t\t\tthis._sendTimeSync([data, localTime]);\n\t\t}\n\n\t\t/* CEXCLUDE */\n\t\tif (ige.isServer) {\n\t\t\tsendTime = parseInt(data[1], 10);\n\t\t\troundTrip = localTime - parseInt(data[0], 10);\n\n\t\t\t/*if (localTime < sendTime) {\n   \tdirection = 'behind';\n   } else if (localTime > sendTime) {\n   \tdirection = 'in front of';\n   } else {\n   \tdirection = 'same as';\n   }\n   \tthis.log('Time sync, server clock ' + (localTime - sendTime) + 'ms ' + direction + ' client, roundtrip: ' + roundTrip + 'ms, send timestamp: ' + parseInt(data[0], 10) + ', local timestamp: ' + localTime);*/\n\n\t\t\tthis._timeSyncLog[clientId] = localTime - sendTime;\n\t\t}\n\t\t/* CEXCLUDE */\n\t}\n};\n\nif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n\tmodule.exports = IgeTimeSyncExtension;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6\n");

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

eval("\nvar ige = __webpack_require__(1);\nvar NetIo = __webpack_require__(8);\n\n/**\n * The client-side net.io component. Handles all client-side\n * networking systems.\n */\nvar IgeNetIoClient = {\n\tversion: '1.0.0',\n\t_initDone: false,\n\t_idCounter: 0,\n\t_requests: {},\n\t_state: 0,\n\n\t/**\n  * Gets the current socket id.\n  * @returns {String} The id of the socket connection to the server.\n  */\n\tid: function () {\n\t\treturn this._id || '';\n\t},\n\n\t/**\n  * Starts the network for the client.\n  * @param {*} url The game server URL.\n  * @param {Function=} callback A callback method to call once the\n  * network has started.\n  */\n\tstart: function (url, callback) {\n\t\tif (this._state === 3) {\n\t\t\t// We're already connected\n\t\t\tif (typeof callback === 'function') {\n\t\t\t\tcallback();\n\t\t\t}\n\t\t} else {\n\t\t\tvar self = this;\n\n\t\t\tself._startCallback = callback;\n\n\t\t\tif (typeof url !== 'undefined') {\n\t\t\t\tthis._url = url;\n\t\t\t}\n\n\t\t\tthis.log('Connecting to net.io server at \"' + this._url + '\"...');\n\n\t\t\tif (typeof NetIo !== 'undefined') {\n\t\t\t\tthis._io = new NetIo.Client(url);\n\t\t\t\tself._state = 1; // Connecting\n\n\t\t\t\t// Define connect listener\n\t\t\t\tthis._io.on('connect', function (clientId) {\n\t\t\t\t\tself._state = 2; // Connected\n\t\t\t\t\tself._id = clientId;\n\t\t\t\t\tself._onConnectToServer.apply(self, arguments);\n\t\t\t\t});\n\n\t\t\t\t// Define message listener\n\t\t\t\tthis._io.on('message', function (data) {\n\t\t\t\t\tif (!self._initDone) {\n\t\t\t\t\t\tvar i,\n\t\t\t\t\t\t    commandCount = 0;\n\n\t\t\t\t\t\t// Check if the data is an init packet\n\t\t\t\t\t\tif (data.cmd === 'init') {\n\t\t\t\t\t\t\t// Set flag to show we've now received an init command\n\t\t\t\t\t\t\tself._initDone = true;\n\t\t\t\t\t\t\tself._state = 3; // Connected and init done\n\n\t\t\t\t\t\t\t// Setup the network commands storage\n\t\t\t\t\t\t\tself._networkCommandsLookup = data.ncmds;\n\n\t\t\t\t\t\t\t// Fill the reverse lookup on the commands\n\t\t\t\t\t\t\tfor (i in self._networkCommandsLookup) {\n\t\t\t\t\t\t\t\tif (self._networkCommandsLookup.hasOwnProperty(i)) {\n\t\t\t\t\t\t\t\t\tself._networkCommandsIndex[self._networkCommandsLookup[i]] = i;\n\t\t\t\t\t\t\t\t\tcommandCount++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Setup default commands\n\t\t\t\t\t\t\tself.define('_igeRequest', function () {\n\t\t\t\t\t\t\t\tself._onRequest.apply(self, arguments);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tself.define('_igeResponse', function () {\n\t\t\t\t\t\t\t\tself._onResponse.apply(self, arguments);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tself.define('_igeNetTimeSync', function () {\n\t\t\t\t\t\t\t\tself._onTimeSync.apply(self, arguments);\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tself.log('Received network command list with count: ' + commandCount);\n\n\t\t\t\t\t\t\t// Setup time scale and current time\n\t\t\t\t\t\t\tige.timeScale(parseFloat(data.ts));\n\t\t\t\t\t\t\tige._currentTime = parseInt(data.ct);\n\n\t\t\t\t\t\t\t// Now fire the start() callback\n\t\t\t\t\t\t\tif (typeof self._startCallback === 'function') {\n\t\t\t\t\t\t\t\tself._startCallback();\n\t\t\t\t\t\t\t\tdelete self._startCallback;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself._onMessageFromServer.apply(self, arguments);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// Define disconnect listener\n\t\t\t\tthis._io.on('disconnect', function () {\n\t\t\t\t\tself._state = 0; // Disconnected\n\t\t\t\t\tself._onDisconnectFromServer.apply(self, arguments);\n\t\t\t\t});\n\n\t\t\t\t// Define error listener\n\t\t\t\tthis._io.on('error', function () {\n\t\t\t\t\tself._onError.apply(self, arguments);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t},\n\n\tstop: function () {\n\t\t// Check we are connected\n\t\tif (self._state === 3) {\n\t\t\tthis._io.disconnect('Client requested disconnect');\n\t\t}\n\t},\n\n\t/**\n  * Gets / sets a network command and callback. When a network command\n  * is received by the client, the callback set up for that command will\n  * automatically be called and passed the data from the incoming network\n  * packet.\n  * @param {String} commandName The name of the command to define.\n  * @param {Function} callback A function to call when the defined network\n  * command is received by the network.\n  * @return {*}\n  */\n\tdefine: function (commandName, callback) {\n\t\tif (commandName !== undefined && callback !== undefined) {\n\t\t\t// Check if this command has been defined by the server\n\t\t\tif (this._networkCommandsLookup[commandName] !== undefined) {\n\t\t\t\tthis._networkCommands[commandName] = callback;\n\t\t\t} else {\n\t\t\t\tthis.log('Cannot define network command \"' + commandName + '\" because it does not exist on the server. Please edit your server code and define the network command there before trying to define it on the client!', 'error');\n\t\t\t}\n\n\t\t\treturn this._entity;\n\t\t} else {\n\t\t\tthis.log('Cannot define network command either the commandName or callback parameters were undefined!', 'error');\n\t\t}\n\t},\n\n\t/**\n  * Sends a network message with the given command name\n  * and data.\n  * @param commandName\n  * @param data\n  */\n\tsend: function (commandName, data) {\n\t\tvar commandIndex = this._networkCommandsLookup[commandName],\n\t\t    ciEncoded;\n\n\t\tif (commandIndex !== undefined) {\n\t\t\tif (this.debug()) {\n\t\t\t\tconsole.log('Sending \"' + commandName + '\" (index ' + commandIndex + ') with data:', data);\n\t\t\t\tthis._debugCounter++;\n\t\t\t}\n\t\t\t// ciEncoded = String.fromCharCode(commandIndex);\n\t\t\tciEncoded = commandIndex;\n\t\t\tthis._io.send([ciEncoded, data]);\n\t\t} else {\n\t\t\tthis.log('Cannot send network packet with command \"' + commandName + '\" because the command has not been defined!', 'error');\n\t\t}\n\t},\n\n\t/**\n  * Sends a network request. This is different from a standard\n  * call to send() because the recipient code will be able to\n  * respond by calling ige.network.response(). When the response\n  * is received, the callback method that was passed in the\n  * callback parameter will be fired with the response data.\n  * @param {String} commandName\n  * @param {Object} data\n  * @param {Function} callback\n  */\n\trequest: function (commandName, data, callback) {\n\t\t// Build the request object\n\t\tvar req = {\n\t\t\tid: this.newIdHex(),\n\t\t\tcmd: commandName,\n\t\t\tdata: data,\n\t\t\tcallback: callback,\n\t\t\ttimestamp: new Date().getTime()\n\t\t};\n\n\t\t// Store the request object\n\t\tthis._requests[req.id] = req;\n\n\t\t// Send the network request packet\n\t\tthis.send('_igeRequest', {\n\t\t\tid: req.id,\n\t\t\tcmd: commandName,\n\t\t\tdata: req.data\n\t\t});\n\t},\n\n\t/**\n  * Sends a response to a network request.\n  * @param {String} requestId\n  * @param {Object} data\n  */\n\tresponse: function (requestId, data) {\n\t\t// Grab the original request object\n\t\tvar req = this._requests[requestId];\n\n\t\tif (req) {\n\t\t\t// Send the network response packet\n\t\t\tthis.send('_igeResponse', {\n\t\t\t\tid: requestId,\n\t\t\t\tcmd: req.commandName,\n\t\t\t\tdata: data\n\t\t\t});\n\n\t\t\t// Remove the request as we've now responded!\n\t\t\tdelete this._requests[requestId];\n\t\t}\n\t},\n\n\t/**\n  * Generates a new 16-character hexadecimal unique ID\n  * @return {String}\n  */\n\tnewIdHex: function () {\n\t\tthis._idCounter++;\n\t\treturn (this._idCounter + (Math.random() * Math.pow(10, 17) + Math.random() * Math.pow(10, 17) + Math.random() * Math.pow(10, 17) + Math.random() * Math.pow(10, 17))).toString(16);\n\t},\n\n\t_onRequest: function (data) {\n\t\t// The message is a network request so fire\n\t\t// the command event with the request id and\n\t\t// the request data\n\t\tthis._requests[data.id] = data;\n\n\t\tif (this.debug()) {\n\t\t\tconsole.log('onRequest', data);\n\t\t\tthis._debugCounter++;\n\t\t}\n\n\t\tif (this._networkCommands[data.cmd]) {\n\t\t\tthis._networkCommands[data.cmd](data.id, data.data);\n\t\t}\n\n\t\tthis.emit(data.cmd, [data.id, data.data]);\n\t},\n\n\t_onResponse: function (data) {\n\t\tvar id, req;\n\n\t\t// The message is a network response\n\t\t// to a request we sent earlier\n\t\tid = data.id;\n\n\t\t// Get the original request object from\n\t\t// the request id\n\t\treq = this._requests[id];\n\n\t\tif (this.debug()) {\n\t\t\tconsole.log('onResponse', data);\n\t\t\tthis._debugCounter++;\n\t\t}\n\n\t\tif (req) {\n\t\t\t// Fire the request callback!\n\t\t\treq.callback(req.cmd, data.data);\n\n\t\t\t// Delete the request from memory\n\t\t\tdelete this._requests[id];\n\t\t}\n\t},\n\n\t/**\n  * Called when the network connects to the server.\n  * @private\n  */\n\t_onConnectToServer: function () {\n\t\tthis.log('Connected to server!');\n\t\tthis.emit('connected');\n\t},\n\n\t/**\n  * Called when data from the server is received on the client.\n  * @param data\n  * @private\n  */\n\t_onMessageFromServer: function (data) {\n\t\t//debugger;\n\t\t// var ciDecoded = data[0].charCodeAt(0),\n\t\tvar ciDecoded = data[0],\n\t\t    commandName = this._networkCommandsIndex[ciDecoded];\n\n\t\tif (this._networkCommands[commandName]) {\n\t\t\tif (this.debug()) {\n\t\t\t\tconsole.log('Received \"' + commandName + '\" (index ' + ciDecoded + ') with data:', data[1]);\n\t\t\t\tthis._debugCounter++;\n\t\t\t}\n\n\t\t\tthis._networkCommands[commandName](data[1]);\n\t\t}\n\n\t\tthis.emit(commandName, data[1]);\n\t},\n\n\t/**\n  * Called when the client is disconnected from the server.\n  * @param data\n  * @private\n  */\n\t_onDisconnectFromServer: function (data) {\n\t\tif (data === 'booted') {\n\t\t\tthis.log('Server rejected our connection because it is not accepting connections at this time!', 'warning');\n\t\t} else {\n\t\t\tthis.log('Disconnected from server!');\n\t\t}\n\t\tthis.emit('disconnected');\n\t},\n\n\t/**\n  * Called when the client has an error with the connection.\n  * @param {Object} data\n  * @private\n  */\n\t_onError: function (data) {\n\t\tthis.log('Error with connection: ' + data.reason, 'error');\n\t}\n};\n\nif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n\tmodule.exports = IgeNetIoClient;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7\n");

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

eval("\nvar IgeClass = __webpack_require__(0);\nvar IgeEventingClass = __webpack_require__(2);\nvar WebSocket = __webpack_require__(9).w3cwebsocket;\n\nconsole.log('WebSocket: ', WebSocket);\n\n// Our namespace\nvar NetIo = {};\n\n/**\n * Define the debug options object.\n * @type {Object}\n * @private\n */\nNetIo._debug = {\n\t_enabled: true,\n\t_node: typeof module !== 'undefined' && typeof module.exports !== 'undefined',\n\t_level: ['log', 'warning', 'error'],\n\t_stacks: false,\n\t_throwErrors: true,\n\t_trace: {\n\t\tsetup: false,\n\t\tenabled: false,\n\t\tmatch: ''\n\t},\n\tenabled: function (val) {\n\t\tif (val !== undefined) {\n\t\t\tthis._enabled = val;\n\t\t\treturn this;\n\t\t}\n\n\t\treturn this._enabled;\n\t}\n};\n\n// https://github.com/pieroxy/lz-string/blob/master/libs/lz-string.min.js\n//NetIo._compressor=function(){function o(o,r){if(!t[o]){t[o]={};for(var n=0;n<o.length;n++)t[o][o.charAt(n)]=n}return t[o][r]}var r=String.fromCharCode,n=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",e=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$\",t={},i={compressToBase64:function(o){if(null==o)return\"\";var r=i._compress(o,6,function(o){return n.charAt(o)});switch(r.length%4){default:case 0:return r;case 1:return r+\"===\";case 2:return r+\"==\";case 3:return r+\"=\"}},decompressFromBase64:function(r){return null==r?\"\":\"\"==r?null:i._decompress(r.length,32,function(e){return o(n,r.charAt(e))})},compressToUTF16:function(o){return null==o?\"\":i._compress(o,15,function(o){return r(o+32)})+\" \"},decompressFromUTF16:function(o){return null==o?\"\":\"\"==o?null:i._decompress(o.length,16384,function(r){return o.charCodeAt(r)-32})},compressToUint8Array:function(o){for(var r=i.compress(o),n=new Uint8Array(2*r.length),e=0,t=r.length;t>e;e++){var s=r.charCodeAt(e);n[2*e]=s>>>8,n[2*e+1]=s%256}return n},decompressFromUint8Array:function(o){if(null===o||void 0===o)return i.decompress(o);for(var n=new Array(o.length/2),e=0,t=n.length;t>e;e++)n[e]=256*o[2*e]+o[2*e+1];var s=[];return n.forEach(function(o){s.push(r(o))}),i.decompress(s.join(\"\"))},compressToEncodedURIComponent:function(o){return null==o?\"\":i._compress(o,6,function(o){return e.charAt(o)})},decompressFromEncodedURIComponent:function(r){return null==r?\"\":\"\"==r?null:(r=r.replace(/ /g,\"+\"),i._decompress(r.length,32,function(n){return o(e,r.charAt(n))}))},compress:function(o){return i._compress(o,16,function(o){return r(o)})},_compress:function(o,r,n){if(null==o)return\"\";var e,t,i,s={},p={},u=\"\",c=\"\",a=\"\",l=2,f=3,h=2,d=[],m=0,v=0;for(i=0;i<o.length;i+=1)if(u=o.charAt(i),Object.prototype.hasOwnProperty.call(s,u)||(s[u]=f++,p[u]=!0),c=a+u,Object.prototype.hasOwnProperty.call(s,c))a=c;else{if(Object.prototype.hasOwnProperty.call(p,a)){if(a.charCodeAt(0)<256){for(e=0;h>e;e++)m<<=1,v==r-1?(v=0,d.push(n(m)),m=0):v++;for(t=a.charCodeAt(0),e=0;8>e;e++)m=m<<1|1&t,v==r-1?(v=0,d.push(n(m)),m=0):v++,t>>=1}else{for(t=1,e=0;h>e;e++)m=m<<1|t,v==r-1?(v=0,d.push(n(m)),m=0):v++,t=0;for(t=a.charCodeAt(0),e=0;16>e;e++)m=m<<1|1&t,v==r-1?(v=0,d.push(n(m)),m=0):v++,t>>=1}l--,0==l&&(l=Math.pow(2,h),h++),delete p[a]}else for(t=s[a],e=0;h>e;e++)m=m<<1|1&t,v==r-1?(v=0,d.push(n(m)),m=0):v++,t>>=1;l--,0==l&&(l=Math.pow(2,h),h++),s[c]=f++,a=String(u)}if(\"\"!==a){if(Object.prototype.hasOwnProperty.call(p,a)){if(a.charCodeAt(0)<256){for(e=0;h>e;e++)m<<=1,v==r-1?(v=0,d.push(n(m)),m=0):v++;for(t=a.charCodeAt(0),e=0;8>e;e++)m=m<<1|1&t,v==r-1?(v=0,d.push(n(m)),m=0):v++,t>>=1}else{for(t=1,e=0;h>e;e++)m=m<<1|t,v==r-1?(v=0,d.push(n(m)),m=0):v++,t=0;for(t=a.charCodeAt(0),e=0;16>e;e++)m=m<<1|1&t,v==r-1?(v=0,d.push(n(m)),m=0):v++,t>>=1}l--,0==l&&(l=Math.pow(2,h),h++),delete p[a]}else for(t=s[a],e=0;h>e;e++)m=m<<1|1&t,v==r-1?(v=0,d.push(n(m)),m=0):v++,t>>=1;l--,0==l&&(l=Math.pow(2,h),h++)}for(t=2,e=0;h>e;e++)m=m<<1|1&t,v==r-1?(v=0,d.push(n(m)),m=0):v++,t>>=1;for(;;){if(m<<=1,v==r-1){d.push(n(m));break}v++}return d.join(\"\")},decompress:function(o){return null==o?\"\":\"\"==o?null:i._decompress(o.length,32768,function(r){return o.charCodeAt(r)})},_decompress:function(o,n,e){var t,i,s,p,u,c,a,l,f=[],h=4,d=4,m=3,v=\"\",w=[],A={val:e(0),position:n,index:1};for(i=0;3>i;i+=1)f[i]=i;for(p=0,c=Math.pow(2,2),a=1;a!=c;)u=A.val&A.position,A.position>>=1,0==A.position&&(A.position=n,A.val=e(A.index++)),p|=(u>0?1:0)*a,a<<=1;switch(t=p){case 0:for(p=0,c=Math.pow(2,8),a=1;a!=c;)u=A.val&A.position,A.position>>=1,0==A.position&&(A.position=n,A.val=e(A.index++)),p|=(u>0?1:0)*a,a<<=1;l=r(p);break;case 1:for(p=0,c=Math.pow(2,16),a=1;a!=c;)u=A.val&A.position,A.position>>=1,0==A.position&&(A.position=n,A.val=e(A.index++)),p|=(u>0?1:0)*a,a<<=1;l=r(p);break;case 2:return\"\"}for(f[3]=l,s=l,w.push(l);;){if(A.index>o)return\"\";for(p=0,c=Math.pow(2,m),a=1;a!=c;)u=A.val&A.position,A.position>>=1,0==A.position&&(A.position=n,A.val=e(A.index++)),p|=(u>0?1:0)*a,a<<=1;switch(l=p){case 0:for(p=0,c=Math.pow(2,8),a=1;a!=c;)u=A.val&A.position,A.position>>=1,0==A.position&&(A.position=n,A.val=e(A.index++)),p|=(u>0?1:0)*a,a<<=1;f[d++]=r(p),l=d-1,h--;break;case 1:for(p=0,c=Math.pow(2,16),a=1;a!=c;)u=A.val&A.position,A.position>>=1,0==A.position&&(A.position=n,A.val=e(A.index++)),p|=(u>0?1:0)*a,a<<=1;f[d++]=r(p),l=d-1,h--;break;case 2:return w.join(\"\")}if(0==h&&(h=Math.pow(2,m),m++),f[l])v=f[l];else{if(l!==d)return null;v=s+s.charAt(0)}w.push(v),f[d++]=s+v.charAt(0),h--,s=v,0==h&&(h=Math.pow(2,m),m++)}}};return i}();\"function\"==typeof define&&define.amd?define(function(){return LZString}):\"undefined\"!=typeof module&&null!=module&&(module.exports=LZString);\n\n/**\n * Define the class system.\n * @type {*}\n */\nNetIo.Class = IgeClass;\n\nNetIo.EventingClass = IgeEventingClass;\n\nNetIo.Client = NetIo.EventingClass.extend({\n\tclassId: 'NetIo.Client',\n\n\tinit: function (url, options) {\n\t\tthis.log('Net.io client starting...');\n\t\tthis._options = options || {};\n\t\tthis._socket = null;\n\t\tthis._state = 0;\n\t\tthis._debug = false;\n\t\tthis._connectionAttempts = 0;\n\n\t\t// Set some default options\n\t\tif (this._options.connectionRetry === undefined) {\n\t\t\tthis._options.connectionRetry = true;\n\t\t}\n\t\tif (this._options.connectionRetryMax === undefined) {\n\t\t\tthis._options.connectionRetryMax = 10;\n\t\t}\n\t\tif (this._options.reconnect === undefined) {\n\t\t\tthis._options.reconnect = true;\n\t\t}\n\n\t\t// If we were passed a url, connect to it\n\t\tif (url !== undefined) {\n\t\t\tthis.connect(url);\n\t\t}\n\t},\n\n\t/**\n  * Gets / sets the debug flag. If set to true, net.io\n  * will output debug data about every network event as\n  * it occurs to the console.\n  * @param {Boolean=} val\n  * @return {*}\n  */\n\tdebug: function (val) {\n\t\tif (val !== undefined) {\n\t\t\tthis._debug = val;\n\t\t\treturn this;\n\t\t}\n\n\t\treturn this._debug;\n\t},\n\n\tconnect: function (url) {\n\t\tthis.log('Connecting to server at ' + url);\n\t\tvar self = this;\n\n\t\t// Set the state to connecting\n\t\tthis._state = 1;\n\n\t\t// Replace http:// with ws://\n\t\turl = url.replace('http://', 'ws://');\n\n\t\t// Create new websocket to the url\n\t\tthis._socket = new WebSocket(url, 'netio1');\n\n\t\t// Setup event listeners\n\t\tthis._socket.onopen = function () {\n\t\t\tself._onOpen.apply(self, arguments);\n\t\t};\n\t\tthis._socket.onmessage = function () {\n\t\t\tself._onData.apply(self, arguments);\n\t\t};\n\t\tthis._socket.onclose = function () {\n\t\t\tself._onClose.apply(self, arguments);\n\t\t};\n\t\tthis._socket.onerror = function () {\n\t\t\tself._onError.apply(self, arguments);\n\t\t};\n\t},\n\n\tdisconnect: function (reason) {\n\t\tthis._socket.close(1000, reason);\n\t},\n\n\tsend: function (data) {\n\t\tthis._socket.send(this._encode(data));\n\t},\n\n\t_onOpen: function () {\n\t\tthis._state = 2;\n\t},\n\n\t_onData: function (data) {\n\t\t// Decode packet and emit message event\n\t\tvar packet = this._decode(data.data);\n\n\t\t// Output debug if required\n\t\tif (this._debug) {\n\t\t\tconsole.log('Incoming data (event, decoded data):', data, packet);\n\t\t}\n\n\t\tif (packet._netioCmd) {\n\t\t\t// The packet is a netio command\n\t\t\tswitch (packet._netioCmd) {\n\t\t\t\tcase 'id':\n\t\t\t\t\t// Store the new id in the socket\n\t\t\t\t\tthis.id = packet.data;\n\n\t\t\t\t\t// Now we have an id, set the state to connected\n\t\t\t\t\tthis._state = 3;\n\n\t\t\t\t\t// Emit the connect event\n\t\t\t\t\tthis.emit('connect', this.id);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'close':\n\t\t\t\t\t// The server told us our connection has been closed\n\t\t\t\t\t// so store the reason the server gave us!\n\t\t\t\t\tthis._disconnectReason = packet.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t} else {\n\t\t\t// The packet is normal data\n\t\t\tthis.emit('message', [packet]);\n\t\t}\n\t},\n\n\t_onClose: function (code, reason, wasClean) {\n\t\t// If we are already connected and have an id...\n\t\tif (this._state === 3) {\n\t\t\tthis._state = 0;\n\t\t\tthis.emit('disconnect', { reason: this._disconnectReason, wasClean: wasClean, code: code });\n\t\t}\n\n\t\t// If we are connected but have no id...\n\t\tif (this._state === 2) {\n\t\t\tthis._state = 0;\n\t\t\tthis.emit('disconnect', { reason: this._disconnectReason, wasClean: wasClean, code: code });\n\t\t}\n\n\t\t// If we were trying to connect...\n\t\tif (this._state === 1) {\n\t\t\tthis._state = 0;\n\t\t\tthis.emit('error', { reason: 'Cannot establish connection, is server running?' });\n\t\t}\n\n\t\t// Remove the last disconnect reason\n\t\tdelete this._disconnectReason;\n\t},\n\n\t_onError: function () {\n\t\tthis.log('An error occurred with the net.io socket!', 'error', arguments);\n\t\tthis.emit('error', arguments);\n\t},\n\n\t_encode: function (data) {\n\t\t// console.log('CLIENT::_encode: ', data);\n\t\t// return NetIo._compressor.compress(JSON.stringify(data));\n\t\treturn JSON.stringify(data);\n\t},\n\n\t_decode: function (data) {\n\t\t// var decomp = NetIo._compressor.decompress(data);\n\t\t// console.log('CLIENT::_decode: ', data, '\\n', decomp);\n\t\t// return decomp;\n\t\treturn JSON.parse(data);\n\t}\n});\n\nif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n\tmodule.exports = NetIo;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8\n");

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

eval("var _global = (function() { return this; })();\nvar NativeWebSocket = _global.WebSocket || _global.MozWebSocket;\nvar websocket_version = __webpack_require__(10);\n\n\n/**\n * Expose a W3C WebSocket class with just one or two arguments.\n */\nfunction W3CWebSocket(uri, protocols) {\n\tvar native_instance;\n\n\tif (protocols) {\n\t\tnative_instance = new NativeWebSocket(uri, protocols);\n\t}\n\telse {\n\t\tnative_instance = new NativeWebSocket(uri);\n\t}\n\n\t/**\n\t * 'native_instance' is an instance of nativeWebSocket (the browser's WebSocket\n\t * class). Since it is an Object it will be returned as it is when creating an\n\t * instance of W3CWebSocket via 'new W3CWebSocket()'.\n\t *\n\t * ECMAScript 5: http://bclary.com/2004/11/07/#a-13.2.2\n\t */\n\treturn native_instance;\n}\n\n\n/**\n * Module exports.\n */\nmodule.exports = {\n    'w3cwebsocket' : NativeWebSocket ? W3CWebSocket : null,\n    'version'      : websocket_version\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd2Vic29ja2V0L2xpYi9icm93c2VyLmpzPzc1OWIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsMkJBQTJCLGFBQWEsRUFBRTtBQUMxQztBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX2dsb2JhbCA9IChmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pKCk7XG52YXIgTmF0aXZlV2ViU29ja2V0ID0gX2dsb2JhbC5XZWJTb2NrZXQgfHwgX2dsb2JhbC5Nb3pXZWJTb2NrZXQ7XG52YXIgd2Vic29ja2V0X3ZlcnNpb24gPSByZXF1aXJlKCcuL3ZlcnNpb24nKTtcblxuXG4vKipcbiAqIEV4cG9zZSBhIFczQyBXZWJTb2NrZXQgY2xhc3Mgd2l0aCBqdXN0IG9uZSBvciB0d28gYXJndW1lbnRzLlxuICovXG5mdW5jdGlvbiBXM0NXZWJTb2NrZXQodXJpLCBwcm90b2NvbHMpIHtcblx0dmFyIG5hdGl2ZV9pbnN0YW5jZTtcblxuXHRpZiAocHJvdG9jb2xzKSB7XG5cdFx0bmF0aXZlX2luc3RhbmNlID0gbmV3IE5hdGl2ZVdlYlNvY2tldCh1cmksIHByb3RvY29scyk7XG5cdH1cblx0ZWxzZSB7XG5cdFx0bmF0aXZlX2luc3RhbmNlID0gbmV3IE5hdGl2ZVdlYlNvY2tldCh1cmkpO1xuXHR9XG5cblx0LyoqXG5cdCAqICduYXRpdmVfaW5zdGFuY2UnIGlzIGFuIGluc3RhbmNlIG9mIG5hdGl2ZVdlYlNvY2tldCAodGhlIGJyb3dzZXIncyBXZWJTb2NrZXRcblx0ICogY2xhc3MpLiBTaW5jZSBpdCBpcyBhbiBPYmplY3QgaXQgd2lsbCBiZSByZXR1cm5lZCBhcyBpdCBpcyB3aGVuIGNyZWF0aW5nIGFuXG5cdCAqIGluc3RhbmNlIG9mIFczQ1dlYlNvY2tldCB2aWEgJ25ldyBXM0NXZWJTb2NrZXQoKScuXG5cdCAqXG5cdCAqIEVDTUFTY3JpcHQgNTogaHR0cDovL2JjbGFyeS5jb20vMjAwNC8xMS8wNy8jYS0xMy4yLjJcblx0ICovXG5cdHJldHVybiBuYXRpdmVfaW5zdGFuY2U7XG59XG5cblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgJ3czY3dlYnNvY2tldCcgOiBOYXRpdmVXZWJTb2NrZXQgPyBXM0NXZWJTb2NrZXQgOiBudWxsLFxuICAgICd2ZXJzaW9uJyAgICAgIDogd2Vic29ja2V0X3ZlcnNpb25cbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy93ZWJzb2NrZXQvbGliL2Jyb3dzZXIuanNcbi8vIG1vZHVsZSBpZCA9IDlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///9\n");

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(11).version;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd2Vic29ja2V0L2xpYi92ZXJzaW9uLmpzPzc3NGIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMTAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL3BhY2thZ2UuanNvbicpLnZlcnNpb247XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy93ZWJzb2NrZXQvbGliL3ZlcnNpb24uanNcbi8vIG1vZHVsZSBpZCA9IDEwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///10\n");

/***/ }),
/* 11 */
/***/ (function(module, exports) {

eval("module.exports = {\"name\":\"websocket\",\"description\":\"Websocket Client & Server Library implementing the WebSocket protocol as specified in RFC 6455.\",\"keywords\":[\"websocket\",\"websockets\",\"socket\",\"networking\",\"comet\",\"push\",\"RFC-6455\",\"realtime\",\"server\",\"client\"],\"author\":\"Brian McKelvey <brian@worlize.com> (https://www.worlize.com/)\",\"contributors\":[\"Iñaki Baz Castillo <ibc@aliax.net> (http://dev.sipdoc.net)\"],\"version\":\"1.0.24\",\"repository\":{\"type\":\"git\",\"url\":\"https://github.com/theturtle32/WebSocket-Node.git\"},\"homepage\":\"https://github.com/theturtle32/WebSocket-Node\",\"engines\":{\"node\":\">=0.8.0\"},\"dependencies\":{\"debug\":\"^2.2.0\",\"nan\":\"^2.3.3\",\"typedarray-to-buffer\":\"^3.1.2\",\"yaeti\":\"^0.0.6\"},\"devDependencies\":{\"buffer-equal\":\"^1.0.0\",\"faucet\":\"^0.0.1\",\"gulp\":\"git+https://github.com/gulpjs/gulp.git#4.0\",\"gulp-jshint\":\"^2.0.4\",\"jshint-stylish\":\"^2.2.1\",\"jshint\":\"^2.0.0\",\"tape\":\"^4.0.1\"},\"config\":{\"verbose\":false},\"scripts\":{\"install\":\"(node-gyp rebuild 2> builderror.log) || (exit 0)\",\"test\":\"faucet test/unit\",\"gulp\":\"gulp\"},\"main\":\"index\",\"directories\":{\"lib\":\"./lib\"},\"browser\":\"lib/browser.js\",\"license\":\"Apache-2.0\"}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd2Vic29ja2V0L3BhY2thZ2UuanNvbj83OWE4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGtCQUFrQiw4YUFBOGEsdUVBQXVFLHVFQUF1RSxpQkFBaUIsaUJBQWlCLGlGQUFpRixvQkFBb0IsaUxBQWlMLFdBQVcsZ0JBQWdCLFlBQVkscUdBQXFHLCtCQUErQixjQUFjIiwiZmlsZSI6IjExLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB7XCJuYW1lXCI6XCJ3ZWJzb2NrZXRcIixcImRlc2NyaXB0aW9uXCI6XCJXZWJzb2NrZXQgQ2xpZW50ICYgU2VydmVyIExpYnJhcnkgaW1wbGVtZW50aW5nIHRoZSBXZWJTb2NrZXQgcHJvdG9jb2wgYXMgc3BlY2lmaWVkIGluIFJGQyA2NDU1LlwiLFwia2V5d29yZHNcIjpbXCJ3ZWJzb2NrZXRcIixcIndlYnNvY2tldHNcIixcInNvY2tldFwiLFwibmV0d29ya2luZ1wiLFwiY29tZXRcIixcInB1c2hcIixcIlJGQy02NDU1XCIsXCJyZWFsdGltZVwiLFwic2VydmVyXCIsXCJjbGllbnRcIl0sXCJhdXRob3JcIjpcIkJyaWFuIE1jS2VsdmV5IDxicmlhbkB3b3JsaXplLmNvbT4gKGh0dHBzOi8vd3d3LndvcmxpemUuY29tLylcIixcImNvbnRyaWJ1dG9yc1wiOltcIknDsWFraSBCYXogQ2FzdGlsbG8gPGliY0BhbGlheC5uZXQ+IChodHRwOi8vZGV2LnNpcGRvYy5uZXQpXCJdLFwidmVyc2lvblwiOlwiMS4wLjI0XCIsXCJyZXBvc2l0b3J5XCI6e1widHlwZVwiOlwiZ2l0XCIsXCJ1cmxcIjpcImh0dHBzOi8vZ2l0aHViLmNvbS90aGV0dXJ0bGUzMi9XZWJTb2NrZXQtTm9kZS5naXRcIn0sXCJob21lcGFnZVwiOlwiaHR0cHM6Ly9naXRodWIuY29tL3RoZXR1cnRsZTMyL1dlYlNvY2tldC1Ob2RlXCIsXCJlbmdpbmVzXCI6e1wibm9kZVwiOlwiPj0wLjguMFwifSxcImRlcGVuZGVuY2llc1wiOntcImRlYnVnXCI6XCJeMi4yLjBcIixcIm5hblwiOlwiXjIuMy4zXCIsXCJ0eXBlZGFycmF5LXRvLWJ1ZmZlclwiOlwiXjMuMS4yXCIsXCJ5YWV0aVwiOlwiXjAuMC42XCJ9LFwiZGV2RGVwZW5kZW5jaWVzXCI6e1wiYnVmZmVyLWVxdWFsXCI6XCJeMS4wLjBcIixcImZhdWNldFwiOlwiXjAuMC4xXCIsXCJndWxwXCI6XCJnaXQraHR0cHM6Ly9naXRodWIuY29tL2d1bHBqcy9ndWxwLmdpdCM0LjBcIixcImd1bHAtanNoaW50XCI6XCJeMi4wLjRcIixcImpzaGludC1zdHlsaXNoXCI6XCJeMi4yLjFcIixcImpzaGludFwiOlwiXjIuMC4wXCIsXCJ0YXBlXCI6XCJeNC4wLjFcIn0sXCJjb25maWdcIjp7XCJ2ZXJib3NlXCI6ZmFsc2V9LFwic2NyaXB0c1wiOntcImluc3RhbGxcIjpcIihub2RlLWd5cCByZWJ1aWxkIDI+IGJ1aWxkZXJyb3IubG9nKSB8fCAoZXhpdCAwKVwiLFwidGVzdFwiOlwiZmF1Y2V0IHRlc3QvdW5pdFwiLFwiZ3VscFwiOlwiZ3VscFwifSxcIm1haW5cIjpcImluZGV4XCIsXCJkaXJlY3Rvcmllc1wiOntcImxpYlwiOlwiLi9saWJcIn0sXCJicm93c2VyXCI6XCJsaWIvYnJvd3Nlci5qc1wiLFwibGljZW5zZVwiOlwiQXBhY2hlLTIuMFwifVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3dlYnNvY2tldC9wYWNrYWdlLmpzb25cbi8vIG1vZHVsZSBpZCA9IDExXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///11\n");

/***/ })
/******/ ]);